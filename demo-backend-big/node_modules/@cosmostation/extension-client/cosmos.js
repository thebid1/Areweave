"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.COSMOS_TYPE = exports.SEND_TRANSACTION_MODE = exports.disconnect = exports.offAccountChanged = exports.onAccountChanged = exports.off = exports.on = exports.getCW20TokenInfo = exports.getCW20TokenBalance = exports.addCW20Tokens = exports.autoSign = exports.sendTransaction = exports.verifyMessage = exports.signMessage = exports.signDirect = exports.signAmino = exports.addChain = exports.requestAccount = exports.getAccount = exports.getActivatedChainIds = exports.getSupportedChainIds = exports.getActivatedChains = exports.getSupportedChains = void 0;
function getSupportedChains() {
    return window.cosmostation.cosmos.request({ method: 'cos_supportedChainNames' });
}
exports.getSupportedChains = getSupportedChains;
function getActivatedChains() {
    return window.cosmostation.cosmos.request({ method: 'cos_activatedChainNames' });
}
exports.getActivatedChains = getActivatedChains;
function getSupportedChainIds() {
    return window.cosmostation.cosmos.request({ method: 'cos_supportedChainIds' });
}
exports.getSupportedChainIds = getSupportedChainIds;
function getActivatedChainIds() {
    return window.cosmostation.cosmos.request({ method: 'cos_activatedChainIds' });
}
exports.getActivatedChainIds = getActivatedChainIds;
function getAccount(chainName) {
    return window.cosmostation.cosmos.request({ method: 'cos_account', params: { chainName: chainName } });
}
exports.getAccount = getAccount;
function requestAccount(chainName) {
    return window.cosmostation.cosmos.request({ method: 'cos_requestAccount', params: { chainName: chainName } });
}
exports.requestAccount = requestAccount;
function addChain(chain) {
    return window.cosmostation.cosmos.request({ method: 'cos_addChain', params: __assign({}, chain) });
}
exports.addChain = addChain;
function signAmino(chainName, doc, options) {
    return window.cosmostation.cosmos.request({
        method: 'cos_signAmino',
        params: { chainName: chainName, doc: doc, isEditMemo: !!(options === null || options === void 0 ? void 0 : options.memo), isEditFee: !!(options === null || options === void 0 ? void 0 : options.fee), gasRate: options === null || options === void 0 ? void 0 : options.gasRate },
    });
}
exports.signAmino = signAmino;
function signDirect(chainName, doc, options) {
    return window.cosmostation.cosmos.request({
        method: 'cos_signDirect',
        params: { chainName: chainName, doc: doc, isEditMemo: !!(options === null || options === void 0 ? void 0 : options.memo), isEditFee: !!(options === null || options === void 0 ? void 0 : options.fee), gasRate: options === null || options === void 0 ? void 0 : options.gasRate },
    });
}
exports.signDirect = signDirect;
function signMessage(chainName, signer, message) {
    return window.cosmostation.cosmos.request({
        method: 'cos_signMessage',
        params: { chainName: chainName, signer: signer, message: message },
    });
}
exports.signMessage = signMessage;
function verifyMessage(chainName, signer, message, signMessageResponse) {
    return window.cosmostation.cosmos.request({
        method: 'cos_verifyMessage',
        params: { chainName: chainName, signer: signer, message: message, publicKey: signMessageResponse.pub_key.value, signature: signMessageResponse.signature },
    });
}
exports.verifyMessage = verifyMessage;
function sendTransaction(chainName, txBytes, mode) {
    return window.cosmostation.cosmos.request({
        method: 'cos_sendTransaction',
        params: { chainName: chainName, txBytes: txBytes, mode: mode },
    });
}
exports.sendTransaction = sendTransaction;
exports.autoSign = {
    set: function (chainName, duration) {
        return window.cosmostation.cosmos.request({
            method: 'cos_setAutoSign',
            params: { chainName: chainName, duration: duration },
        });
    },
    get: function (chainName) {
        return window.cosmostation.cosmos.request({
            method: 'cos_getAutoSign',
            params: { chainName: chainName },
        });
    },
    delete: function (chainName) {
        return window.cosmostation.cosmos.request({
            method: 'cos_deleteAutoSign',
            params: { chainName: chainName },
        });
    },
};
function addCW20Tokens(chainName, tokens) {
    return window.cosmostation.cosmos.request({
        method: 'cos_addTokensCW20',
        params: { chainName: chainName, tokens: tokens },
    });
}
exports.addCW20Tokens = addCW20Tokens;
function getCW20TokenBalance(chainName, contractAddress, address) {
    return window.cosmostation.cosmos.request({
        method: 'cos_getBalanceCW20',
        params: { chainName: chainName, contractAddress: contractAddress, address: address },
    });
}
exports.getCW20TokenBalance = getCW20TokenBalance;
function getCW20TokenInfo(chainName, contractAddress) {
    return window.cosmostation.cosmos.request({
        method: 'cos_getTokenInfoCW20',
        params: { chainName: chainName, contractAddress: contractAddress },
    });
}
exports.getCW20TokenInfo = getCW20TokenInfo;
function on(eventName, handler) {
    return window.cosmostation.cosmos.on(eventName, handler);
}
exports.on = on;
function off(event) {
    window.cosmostation.cosmos.off(event);
}
exports.off = off;
function onAccountChanged(handler) {
    return window.cosmostation.cosmos.on('accountChanged', handler);
}
exports.onAccountChanged = onAccountChanged;
function offAccountChanged(event) {
    window.cosmostation.cosmos.off(event);
}
exports.offAccountChanged = offAccountChanged;
function disconnect() {
    return window.cosmostation.cosmos.request({
        method: 'cos_disconnect',
    });
}
exports.disconnect = disconnect;
exports.SEND_TRANSACTION_MODE = {
    UNSPECIFIED: 0,
    BLOCK: 1,
    SYNC: 2,
    ASYNC: 3,
};
exports.COSMOS_TYPE = {
    BASIC: '',
    ETHERMINT: 'ETHERMINT',
};
