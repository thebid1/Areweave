"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgInstallBundleResponse = exports.MsgInstallBundle = exports.MsgProvisionResponse = exports.MsgProvision = exports.MsgWalletSpendActionResponse = exports.MsgWalletSpendAction = exports.MsgWalletActionResponse = exports.MsgWalletAction = exports.MsgDeliverInboundResponse = exports.MsgDeliverInbound = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "agoric.swingset";
function createBaseMsgDeliverInbound() {
    return { messages: [], nums: [], ack: "0", submitter: new Uint8Array() };
}
exports.MsgDeliverInbound = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.messages) {
            writer.uint32(10).string(v);
        }
        writer.uint32(18).fork();
        for (const v of message.nums) {
            writer.uint64(v);
        }
        writer.ldelim();
        if (message.ack !== "0") {
            writer.uint32(24).uint64(message.ack);
        }
        if (message.submitter.length !== 0) {
            writer.uint32(34).bytes(message.submitter);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeliverInbound();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.messages.push(reader.string());
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.nums.push(longToString(reader.uint64()));
                        }
                    }
                    else {
                        message.nums.push(longToString(reader.uint64()));
                    }
                    break;
                case 3:
                    message.ack = longToString(reader.uint64());
                    break;
                case 4:
                    message.submitter = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            messages: Array.isArray(object === null || object === void 0 ? void 0 : object.messages)
                ? object.messages.map((e) => String(e))
                : [],
            nums: Array.isArray(object === null || object === void 0 ? void 0 : object.nums)
                ? object.nums.map((e) => String(e))
                : [],
            ack: isSet(object.ack) ? String(object.ack) : "0",
            submitter: isSet(object.submitter)
                ? bytesFromBase64(object.submitter)
                : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messages) {
            obj.messages = message.messages.map((e) => e);
        }
        else {
            obj.messages = [];
        }
        if (message.nums) {
            obj.nums = message.nums.map((e) => e);
        }
        else {
            obj.nums = [];
        }
        message.ack !== undefined && (obj.ack = message.ack);
        message.submitter !== undefined &&
            (obj.submitter = base64FromBytes(message.submitter !== undefined ? message.submitter : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgDeliverInbound();
        message.messages = ((_a = object.messages) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.nums = ((_b = object.nums) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.ack = (_c = object.ack) !== null && _c !== void 0 ? _c : "0";
        message.submitter = (_d = object.submitter) !== null && _d !== void 0 ? _d : new Uint8Array();
        return message;
    },
};
function createBaseMsgDeliverInboundResponse() {
    return {};
}
exports.MsgDeliverInboundResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeliverInboundResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgDeliverInboundResponse();
        return message;
    },
};
function createBaseMsgWalletAction() {
    return { owner: new Uint8Array(), action: "" };
}
exports.MsgWalletAction = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.owner.length !== 0) {
            writer.uint32(10).bytes(message.owner);
        }
        if (message.action !== "") {
            writer.uint32(18).string(message.action);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWalletAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.bytes();
                    break;
                case 2:
                    message.action = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: isSet(object.owner)
                ? bytesFromBase64(object.owner)
                : new Uint8Array(),
            action: isSet(object.action) ? String(object.action) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined &&
            (obj.owner = base64FromBytes(message.owner !== undefined ? message.owner : new Uint8Array()));
        message.action !== undefined && (obj.action = message.action);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgWalletAction();
        message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.action = (_b = object.action) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgWalletActionResponse() {
    return {};
}
exports.MsgWalletActionResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWalletActionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgWalletActionResponse();
        return message;
    },
};
function createBaseMsgWalletSpendAction() {
    return { owner: new Uint8Array(), spendAction: "" };
}
exports.MsgWalletSpendAction = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.owner.length !== 0) {
            writer.uint32(10).bytes(message.owner);
        }
        if (message.spendAction !== "") {
            writer.uint32(18).string(message.spendAction);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWalletSpendAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.bytes();
                    break;
                case 2:
                    message.spendAction = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: isSet(object.owner)
                ? bytesFromBase64(object.owner)
                : new Uint8Array(),
            spendAction: isSet(object.spendAction) ? String(object.spendAction) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined &&
            (obj.owner = base64FromBytes(message.owner !== undefined ? message.owner : new Uint8Array()));
        message.spendAction !== undefined &&
            (obj.spendAction = message.spendAction);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgWalletSpendAction();
        message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.spendAction = (_b = object.spendAction) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgWalletSpendActionResponse() {
    return {};
}
exports.MsgWalletSpendActionResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWalletSpendActionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgWalletSpendActionResponse();
        return message;
    },
};
function createBaseMsgProvision() {
    return {
        nickname: "",
        address: new Uint8Array(),
        powerFlags: [],
        submitter: new Uint8Array(),
    };
}
exports.MsgProvision = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.nickname !== "") {
            writer.uint32(10).string(message.nickname);
        }
        if (message.address.length !== 0) {
            writer.uint32(18).bytes(message.address);
        }
        for (const v of message.powerFlags) {
            writer.uint32(26).string(v);
        }
        if (message.submitter.length !== 0) {
            writer.uint32(34).bytes(message.submitter);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgProvision();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.nickname = reader.string();
                    break;
                case 2:
                    message.address = reader.bytes();
                    break;
                case 3:
                    message.powerFlags.push(reader.string());
                    break;
                case 4:
                    message.submitter = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            nickname: isSet(object.nickname) ? String(object.nickname) : "",
            address: isSet(object.address)
                ? bytesFromBase64(object.address)
                : new Uint8Array(),
            powerFlags: Array.isArray(object === null || object === void 0 ? void 0 : object.powerFlags)
                ? object.powerFlags.map((e) => String(e))
                : [],
            submitter: isSet(object.submitter)
                ? bytesFromBase64(object.submitter)
                : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.nickname !== undefined && (obj.nickname = message.nickname);
        message.address !== undefined &&
            (obj.address = base64FromBytes(message.address !== undefined ? message.address : new Uint8Array()));
        if (message.powerFlags) {
            obj.powerFlags = message.powerFlags.map((e) => e);
        }
        else {
            obj.powerFlags = [];
        }
        message.submitter !== undefined &&
            (obj.submitter = base64FromBytes(message.submitter !== undefined ? message.submitter : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgProvision();
        message.nickname = (_a = object.nickname) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.powerFlags = ((_c = object.powerFlags) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.submitter = (_d = object.submitter) !== null && _d !== void 0 ? _d : new Uint8Array();
        return message;
    },
};
function createBaseMsgProvisionResponse() {
    return {};
}
exports.MsgProvisionResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgProvisionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgProvisionResponse();
        return message;
    },
};
function createBaseMsgInstallBundle() {
    return {
        bundle: "",
        submitter: new Uint8Array(),
        compressedBundle: new Uint8Array(),
        uncompressedSize: "0",
    };
}
exports.MsgInstallBundle = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.bundle !== "") {
            writer.uint32(10).string(message.bundle);
        }
        if (message.submitter.length !== 0) {
            writer.uint32(18).bytes(message.submitter);
        }
        if (message.compressedBundle.length !== 0) {
            writer.uint32(26).bytes(message.compressedBundle);
        }
        if (message.uncompressedSize !== "0") {
            writer.uint32(32).int64(message.uncompressedSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInstallBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bundle = reader.string();
                    break;
                case 2:
                    message.submitter = reader.bytes();
                    break;
                case 3:
                    message.compressedBundle = reader.bytes();
                    break;
                case 4:
                    message.uncompressedSize = longToString(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bundle: isSet(object.bundle) ? String(object.bundle) : "",
            submitter: isSet(object.submitter)
                ? bytesFromBase64(object.submitter)
                : new Uint8Array(),
            compressedBundle: isSet(object.compressedBundle)
                ? bytesFromBase64(object.compressedBundle)
                : new Uint8Array(),
            uncompressedSize: isSet(object.uncompressedSize)
                ? String(object.uncompressedSize)
                : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        message.bundle !== undefined && (obj.bundle = message.bundle);
        message.submitter !== undefined &&
            (obj.submitter = base64FromBytes(message.submitter !== undefined ? message.submitter : new Uint8Array()));
        message.compressedBundle !== undefined &&
            (obj.compressedBundle = base64FromBytes(message.compressedBundle !== undefined
                ? message.compressedBundle
                : new Uint8Array()));
        message.uncompressedSize !== undefined &&
            (obj.uncompressedSize = message.uncompressedSize);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgInstallBundle();
        message.bundle = (_a = object.bundle) !== null && _a !== void 0 ? _a : "";
        message.submitter = (_b = object.submitter) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.compressedBundle = (_c = object.compressedBundle) !== null && _c !== void 0 ? _c : new Uint8Array();
        message.uncompressedSize = (_d = object.uncompressedSize) !== null && _d !== void 0 ? _d : "0";
        return message;
    },
};
function createBaseMsgInstallBundleResponse() {
    return {};
}
exports.MsgInstallBundleResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInstallBundleResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgInstallBundleResponse();
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
const atob = globalThis.atob ||
    ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa ||
    ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return btoa(bin.join(""));
}
function longToString(long) {
    return long.toString();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=msgs.js.map