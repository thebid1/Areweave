"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Validator = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "stride.stakeibc";
function createBaseValidator() {
    return {
        name: "",
        address: "",
        weight: "0",
        delegation: "",
        slashQueryProgressTracker: "",
        slashQueryCheckpoint: "",
        sharesToTokensRate: "",
        delegationChangesInProgress: "0",
        slashQueryInProgress: false,
    };
}
exports.Validator = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.weight !== "0") {
            writer.uint32(48).uint64(message.weight);
        }
        if (message.delegation !== "") {
            writer.uint32(42).string(message.delegation);
        }
        if (message.slashQueryProgressTracker !== "") {
            writer.uint32(74).string(message.slashQueryProgressTracker);
        }
        if (message.slashQueryCheckpoint !== "") {
            writer.uint32(98).string(message.slashQueryCheckpoint);
        }
        if (message.sharesToTokensRate !== "") {
            writer.uint32(82).string(message.sharesToTokensRate);
        }
        if (message.delegationChangesInProgress !== "0") {
            writer.uint32(88).int64(message.delegationChangesInProgress);
        }
        if (message.slashQueryInProgress === true) {
            writer.uint32(104).bool(message.slashQueryInProgress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.address = reader.string();
                    break;
                case 6:
                    message.weight = longToString(reader.uint64());
                    break;
                case 5:
                    message.delegation = reader.string();
                    break;
                case 9:
                    message.slashQueryProgressTracker = reader.string();
                    break;
                case 12:
                    message.slashQueryCheckpoint = reader.string();
                    break;
                case 10:
                    message.sharesToTokensRate = reader.string();
                    break;
                case 11:
                    message.delegationChangesInProgress = longToString(reader.int64());
                    break;
                case 13:
                    message.slashQueryInProgress = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            address: isSet(object.address) ? String(object.address) : "",
            weight: isSet(object.weight) ? String(object.weight) : "0",
            delegation: isSet(object.delegation) ? String(object.delegation) : "",
            slashQueryProgressTracker: isSet(object.slashQueryProgressTracker)
                ? String(object.slashQueryProgressTracker)
                : "",
            slashQueryCheckpoint: isSet(object.slashQueryCheckpoint)
                ? String(object.slashQueryCheckpoint)
                : "",
            sharesToTokensRate: isSet(object.sharesToTokensRate)
                ? String(object.sharesToTokensRate)
                : "",
            delegationChangesInProgress: isSet(object.delegationChangesInProgress)
                ? String(object.delegationChangesInProgress)
                : "0",
            slashQueryInProgress: isSet(object.slashQueryInProgress)
                ? Boolean(object.slashQueryInProgress)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.address !== undefined && (obj.address = message.address);
        message.weight !== undefined && (obj.weight = message.weight);
        message.delegation !== undefined && (obj.delegation = message.delegation);
        message.slashQueryProgressTracker !== undefined &&
            (obj.slashQueryProgressTracker = message.slashQueryProgressTracker);
        message.slashQueryCheckpoint !== undefined &&
            (obj.slashQueryCheckpoint = message.slashQueryCheckpoint);
        message.sharesToTokensRate !== undefined &&
            (obj.sharesToTokensRate = message.sharesToTokensRate);
        message.delegationChangesInProgress !== undefined &&
            (obj.delegationChangesInProgress = message.delegationChangesInProgress);
        message.slashQueryInProgress !== undefined &&
            (obj.slashQueryInProgress = message.slashQueryInProgress);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseValidator();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        message.weight = (_c = object.weight) !== null && _c !== void 0 ? _c : "0";
        message.delegation = (_d = object.delegation) !== null && _d !== void 0 ? _d : "";
        message.slashQueryProgressTracker = (_e = object.slashQueryProgressTracker) !== null && _e !== void 0 ? _e : "";
        message.slashQueryCheckpoint = (_f = object.slashQueryCheckpoint) !== null && _f !== void 0 ? _f : "";
        message.sharesToTokensRate = (_g = object.sharesToTokensRate) !== null && _g !== void 0 ? _g : "";
        message.delegationChangesInProgress =
            (_h = object.delegationChangesInProgress) !== null && _h !== void 0 ? _h : "0";
        message.slashQueryInProgress = (_j = object.slashQueryInProgress) !== null && _j !== void 0 ? _j : false;
        return message;
    },
};
function longToString(long) {
    return long.toString();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=validator.js.map