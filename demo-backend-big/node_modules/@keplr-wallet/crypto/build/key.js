"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PubKeySecp256k1 = exports.PubKeyStarknet = exports.PrivKeySecp256k1 = void 0;
const secp256k1_1 = require("@noble/curves/secp256k1");
const utils = __importStar(require("@noble/curves/abstract/utils"));
const sha2_1 = require("@noble/hashes/sha2");
const ripemd160_1 = require("@noble/hashes/ripemd160");
const buffer_1 = require("buffer/");
const hash_1 = require("./hash");
const starknet_1 = require("starknet");
class PrivKeySecp256k1 {
    static generateRandomKey() {
        return new PrivKeySecp256k1(secp256k1_1.secp256k1.utils.randomPrivateKey());
    }
    constructor(privKey) {
        this.privKey = privKey;
    }
    toBytes() {
        return new Uint8Array(this.privKey);
    }
    getPubKey() {
        return new PubKeySecp256k1(secp256k1_1.secp256k1.getPublicKey(this.privKey, true));
    }
    signDigest32(digest) {
        if (digest.length !== 32) {
            throw new Error(`Invalid length of digest to sign: ${digest.length}`);
        }
        const signature = secp256k1_1.secp256k1.sign(digest, this.privKey, {
            lowS: true,
        });
        return {
            r: utils.numberToBytesBE(signature.r, 32),
            s: utils.numberToBytesBE(signature.s, 32),
            v: signature.recovery,
        };
    }
}
exports.PrivKeySecp256k1 = PrivKeySecp256k1;
class PubKeyStarknet {
    constructor(pubKey) {
        this.pubKey = pubKey;
        if (pubKey.length !== 64) {
            throw new Error(`Invalid length of public key: ${pubKey.length}`);
        }
    }
    toBytes() {
        return new Uint8Array(this.pubKey);
    }
    getStarknetPubKey() {
        return this.pubKey.slice(0, 32);
    }
    getStarknetAddress(salt, classHash) {
        const starknetPubKey = this.getStarknetPubKey();
        let calculated = starknet_1.hash
            .calculateContractAddressFromHash("0x" + buffer_1.Buffer.from(salt).toString("hex"), "0x" + buffer_1.Buffer.from(classHash).toString("hex"), ["0x" + buffer_1.Buffer.from(starknetPubKey).toString("hex")], "0x00")
            .replace("0x", "");
        const padZero = 64 - calculated.length;
        if (padZero > 0) {
            calculated = "0".repeat(padZero) + calculated;
        }
        else if (padZero < 0) {
            throw new Error("Invalid length of calculated address");
        }
        return new Uint8Array(buffer_1.Buffer.from(calculated, "hex"));
    }
    getStarknetAddressParams() {
        return {
            xLow: this.pubKey.slice(16, 32),
            xHigh: this.pubKey.slice(0, 16),
            yLow: this.pubKey.slice(48, 64),
            yHigh: this.pubKey.slice(32, 48),
        };
    }
}
exports.PubKeyStarknet = PubKeyStarknet;
class PubKeySecp256k1 {
    constructor(pubKey) {
        this.pubKey = pubKey;
        if (pubKey.length !== 33 && pubKey.length !== 65) {
            throw new Error(`Invalid length of public key: ${pubKey.length}`);
        }
    }
    toBytes(uncompressed) {
        if (uncompressed && this.pubKey.length === 65) {
            return this.pubKey;
        }
        if (!uncompressed && this.pubKey.length === 33) {
            return this.pubKey;
        }
        if (uncompressed) {
            return secp256k1_1.secp256k1.ProjectivePoint.fromHex(buffer_1.Buffer.from(this.pubKey).toString("hex")).toRawBytes(false);
        }
        else {
            return secp256k1_1.secp256k1.ProjectivePoint.fromHex(buffer_1.Buffer.from(this.pubKey).toString("hex")).toRawBytes(true);
        }
    }
    /**
     * @deprecated Use `getCosmosAddress()` instead.
     */
    getAddress() {
        return this.getCosmosAddress();
    }
    getCosmosAddress() {
        return (0, ripemd160_1.ripemd160)((0, sha2_1.sha256)(this.toBytes(false)));
    }
    getEthAddress() {
        // Should be uncompressed.
        // And remove prefix byte.
        // And hash by keccak256.
        // Use last 20 bytes.
        return hash_1.Hash.keccak256(this.toBytes(true).slice(1)).slice(-20);
    }
    getStarknetAddress(salt, classHash) {
        const pubBytes = this.toBytes(true).slice(1);
        const xLow = pubBytes.slice(16, 32);
        const xHigh = pubBytes.slice(0, 16);
        const yLow = pubBytes.slice(48, 64);
        const yHigh = pubBytes.slice(32, 48);
        let calculated = starknet_1.hash
            .calculateContractAddressFromHash("0x" + buffer_1.Buffer.from(salt).toString("hex"), "0x" + buffer_1.Buffer.from(classHash).toString("hex"), [
            "0x" + buffer_1.Buffer.from(xLow).toString("hex"),
            "0x" + buffer_1.Buffer.from(xHigh).toString("hex"),
            "0x" + buffer_1.Buffer.from(yLow).toString("hex"),
            "0x" + buffer_1.Buffer.from(yHigh).toString("hex"),
        ], "0x00")
            .replace("0x", "");
        const padZero = 64 - calculated.length;
        if (padZero > 0) {
            calculated = "0".repeat(padZero) + calculated;
        }
        else if (padZero < 0) {
            throw new Error("Invalid length of calculated address");
        }
        return new Uint8Array(buffer_1.Buffer.from(calculated, "hex"));
    }
    getStarknetAddressParams() {
        const pubBytes = this.toBytes(true).slice(1);
        return {
            xLow: pubBytes.slice(16, 32),
            xHigh: pubBytes.slice(0, 16),
            yLow: pubBytes.slice(48, 64),
            yHigh: pubBytes.slice(32, 48),
        };
    }
    getStarknetPubKey() {
        return this.pubKey.slice(1);
    }
    verifyDigest32(digest, signature) {
        if (digest.length !== 32) {
            throw new Error(`Invalid length of digest to verify: ${digest.length}`);
        }
        if (signature.length !== 64) {
            throw new Error(`Invalid length of signature: ${signature.length}`);
        }
        const r = signature.slice(0, 32);
        const s = signature.slice(32);
        return secp256k1_1.secp256k1.verify({
            r: utils.bytesToNumberBE(r),
            s: utils.bytesToNumberBE(s),
        }, digest, this.pubKey);
    }
}
exports.PubKeySecp256k1 = PubKeySecp256k1;
//# sourceMappingURL=key.js.map