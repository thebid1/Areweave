export declare class PrivKeySecp256k1 {
    protected readonly privKey: Uint8Array;
    static generateRandomKey(): PrivKeySecp256k1;
    constructor(privKey: Uint8Array);
    toBytes(): Uint8Array;
    getPubKey(): PubKeySecp256k1;
    signDigest32(digest: Uint8Array): {
        readonly r: Uint8Array;
        readonly s: Uint8Array;
        readonly v: number | null;
    };
}
export declare class PubKeyStarknet {
    protected readonly pubKey: Uint8Array;
    constructor(pubKey: Uint8Array);
    toBytes(): Uint8Array;
    getStarknetPubKey(): Uint8Array;
    getStarknetAddress(salt: Uint8Array, classHash: Uint8Array): Uint8Array;
    getStarknetAddressParams(): {
        readonly xLow: Uint8Array;
        readonly xHigh: Uint8Array;
        readonly yLow: Uint8Array;
        readonly yHigh: Uint8Array;
    };
}
export declare class PubKeySecp256k1 {
    protected readonly pubKey: Uint8Array;
    constructor(pubKey: Uint8Array);
    toBytes(uncompressed?: boolean): Uint8Array;
    /**
     * @deprecated Use `getCosmosAddress()` instead.
     */
    getAddress(): Uint8Array;
    getCosmosAddress(): Uint8Array;
    getEthAddress(): Uint8Array;
    getStarknetAddress(salt: Uint8Array, classHash: Uint8Array): Uint8Array;
    getStarknetAddressParams(): {
        readonly xLow: Uint8Array;
        readonly xHigh: Uint8Array;
        readonly yLow: Uint8Array;
        readonly yHigh: Uint8Array;
    };
    getStarknetPubKey(): Uint8Array;
    verifyDigest32(digest: Uint8Array, signature: Uint8Array): boolean;
}
