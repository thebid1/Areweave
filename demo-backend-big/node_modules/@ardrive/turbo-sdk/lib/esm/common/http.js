import { createAxiosInstance } from '../utils/axiosClient.js';
import { FailedRequestError } from '../utils/errors.js';
export class TurboHTTPService {
    constructor({ url, retryConfig, logger, }) {
        this.logger = logger;
        this.axios = createAxiosInstance({
            axiosConfig: {
                baseURL: url,
                maxRedirects: 0, // prevents backpressure issues when uploading larger streams via https
                onUploadProgress: (progressEvent) => {
                    this.logger.debug(`Uploading...`, {
                        percent: Math.floor((progressEvent.progress ?? 0) * 100),
                        loaded: `${progressEvent.loaded} bytes`,
                        total: `${progressEvent.total} bytes`,
                    });
                    if (progressEvent.progress === 1) {
                        this.logger.debug(`Upload complete!`);
                    }
                },
            },
            retryConfig,
            logger: this.logger,
        });
    }
    async get({ endpoint, signal, allowedStatuses = [200, 202], headers, }) {
        const { status, statusText, data } = await this.axios.get(endpoint, {
            headers,
            signal,
        });
        if (!allowedStatuses.includes(status)) {
            throw new FailedRequestError(status, 
            // Return error message from server if available
            typeof data === 'string' ? data : statusText);
        }
        return data;
    }
    async post({ endpoint, signal, allowedStatuses = [200, 202], headers, data, }) {
        const { status, statusText, data: response, } = await this.axios.post(endpoint, data, {
            headers,
            signal,
        });
        if (!allowedStatuses.includes(status)) {
            throw new FailedRequestError(status, 
            // Return error message from server if available
            typeof response === 'string' ? response : statusText);
        }
        return response;
    }
}
