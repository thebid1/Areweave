"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.exitWithErrorLog = exitWithErrorLog;
exports.runCommand = runCommand;
exports.applyOptions = applyOptions;
exports.tokenFromOptions = tokenFromOptions;
exports.valueFromOptions = valueFromOptions;
exports.getFolderPathFromOptions = getFolderPathFromOptions;
exports.addressOrPrivateKeyFromOptions = addressOrPrivateKeyFromOptions;
exports.optionalPrivateKeyFromOptions = optionalPrivateKeyFromOptions;
exports.privateKeyFromOptions = privateKeyFromOptions;
exports.configFromOptions = configFromOptions;
exports.turboFromOptions = turboFromOptions;
exports.paidByFromOptions = paidByFromOptions;
exports.getUploadFolderOptions = getUploadFolderOptions;
/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const bs58_1 = __importDefault(require("bs58"));
const fs_1 = require("fs");
const index_js_1 = require("../node/index.js");
const errors_js_1 = require("./errors.js");
function exitWithErrorLog(error) {
    console.error(error instanceof Error ? error.message : error);
    process.exit(1);
}
async function runCommand(command, action) {
    const options = command.optsWithGlobals();
    try {
        await action(options);
        process.exit(0);
    }
    catch (error) {
        exitWithErrorLog(error);
    }
}
function applyOptions(command, options) {
    [...options].forEach((option) => {
        command.option(option.alias, option.description, option.default);
    });
    return command;
}
function tokenFromOptions(options) {
    const token = options.token;
    if (token === undefined) {
        throw new Error('Token type required');
    }
    if (!(0, index_js_1.isTokenType)(token)) {
        throw new Error('Invalid token type');
    }
    return token;
}
function valueFromOptions(options) {
    const value = options.value;
    if (value === undefined) {
        throw new Error('Value is required. Use --value <value>');
    }
    return value;
}
function getFolderPathFromOptions(options) {
    const folderPath = options.folderPath;
    if (folderPath === undefined) {
        throw new Error('Folder path is required. Use --folderPath <path>');
    }
    // Check if path exists and is a directory
    const stats = (0, fs_1.statSync)(folderPath);
    if (!stats.isDirectory()) {
        throw new Error('Folder path is not a directory');
    }
    return folderPath;
}
async function addressOrPrivateKeyFromOptions(options) {
    if (options.address !== undefined) {
        return { address: options.address, privateKey: undefined };
    }
    return {
        address: undefined,
        privateKey: await optionalPrivateKeyFromOptions(options),
    };
}
async function optionalPrivateKeyFromOptions(options) {
    try {
        const key = await privateKeyFromOptions(options);
        return key;
    }
    catch (error) {
        if (error instanceof errors_js_1.NoWalletProvidedError) {
            return undefined;
        }
        throw error;
    }
}
async function privateKeyFromOptions({ mnemonic, privateKey, walletFile, token, }) {
    if (mnemonic !== undefined) {
        if (token === 'kyve') {
            return (0, index_js_1.privateKeyFromKyveMnemonic)(mnemonic);
        }
        else {
            // TODO: Implement other token types mnemonic to wallet
            throw new Error('mnemonic provided but this token type mnemonic to wallet is not supported');
        }
    }
    else if (walletFile !== undefined) {
        const wallet = JSON.parse((0, fs_1.readFileSync)(walletFile, 'utf-8'));
        return token === 'solana' ? bs58_1.default.encode(wallet) : wallet;
    }
    else if (privateKey !== undefined) {
        return privateKey;
    }
    // TODO: Get TURBO_WALLET_FILE, TURBO_MNEMONIC, TURBO_PRIVATE_KEY or similar from ENV variables
    // TODO: Add prompts for selecting wallet type and secure input
    throw new errors_js_1.NoWalletProvidedError();
}
const tokenToDevGatewayMap = {
    arweave: 'https://arweave.net', // No arweave test net
    solana: 'https://api.devnet.solana.com',
    ethereum: 'https://ethereum-holesky-rpc.publicnode.com',
    kyve: 'https://api.korellia.kyve.network',
    matic: 'https://rpc-amoy.polygon.technology',
    pol: 'https://rpc-amoy.polygon.technology',
};
function configFromOptions(options) {
    const token = tokenFromOptions(options);
    let paymentUrl = undefined;
    let uploadUrl = undefined;
    let gatewayUrl = undefined;
    if (options.local && options.dev) {
        throw new Error('Cannot use both --local and --dev flags');
    }
    if (options.dev) {
        // Use development endpoints
        paymentUrl = index_js_1.developmentTurboConfiguration.paymentServiceConfig.url;
        uploadUrl = index_js_1.developmentTurboConfiguration.uploadServiceConfig.url;
        gatewayUrl = tokenToDevGatewayMap[token];
    }
    else if (options.local) {
        // Use local endpoints
        paymentUrl = 'http://localhost:4000';
        uploadUrl = 'http://localhost:3000';
        gatewayUrl = 'http://localhost:1984';
    }
    else {
        // Use default endpoints
        paymentUrl = index_js_1.defaultTurboConfiguration.paymentServiceConfig.url;
        uploadUrl = index_js_1.defaultTurboConfiguration.uploadServiceConfig.url;
    }
    // Override gateway, payment, and upload service default endpoints if provided
    if (options.gateway !== undefined) {
        gatewayUrl = options.gateway;
    }
    if (options.paymentUrl !== undefined) {
        paymentUrl = options.paymentUrl;
    }
    if (options.uploadUrl !== undefined) {
        uploadUrl = options.uploadUrl;
    }
    const config = {
        paymentServiceConfig: { url: paymentUrl },
        uploadServiceConfig: { url: uploadUrl },
        gatewayUrl,
        token,
    };
    return config;
}
async function turboFromOptions(options) {
    const privateKey = await privateKeyFromOptions(options);
    return index_js_1.TurboFactory.authenticated({
        ...configFromOptions(options),
        privateKey,
    });
}
async function paidByFromOptions({ paidBy: paidByCliInput, ignoreApprovals, useSignerBalanceFirst, }, turbo) {
    const paidBy = await (async () => {
        if (paidByCliInput !== undefined && paidByCliInput.length > 0) {
            return paidByCliInput;
        }
        if (ignoreApprovals) {
            return undefined;
        }
        const { receivedApprovals } = await turbo.getBalance();
        if (receivedApprovals !== undefined && receivedApprovals.length !== 0) {
            // get unique paying addresses from any received approvals
            return Array.from(new Set(receivedApprovals.map((approval) => approval.payingAddress)));
        }
        return undefined;
    })();
    if (paidBy !== undefined && useSignerBalanceFirst) {
        // Add the signer's address to the front of the paidBy array
        paidBy.unshift(await turbo.signer.getNativeAddress());
    }
    return paidBy;
}
function getUploadFolderOptions(options) {
    if (options.folderPath === undefined) {
        throw new Error('--folder-path is required');
    }
    return {
        folderPath: options.folderPath,
        indexFile: options.indexFile,
        fallbackFile: options.fallbackFile,
        disableManifest: !options.manifest,
        maxConcurrentUploads: +(options.maxConcurrency ?? 1),
    };
}
