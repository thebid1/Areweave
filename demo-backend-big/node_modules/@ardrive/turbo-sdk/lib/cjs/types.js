"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isJWK = exports.isWebUploadFolderParams = exports.isNodeUploadFolderParams = exports.tokenTypes = exports.fiatCurrencyTypes = void 0;
exports.isCurrency = isCurrency;
exports.isKyvePrivateKey = isKyvePrivateKey;
exports.isEthPrivateKey = isEthPrivateKey;
exports.isSolanaWalletAdapter = isSolanaWalletAdapter;
exports.isEthereumWalletAdapter = isEthereumWalletAdapter;
exports.fiatCurrencyTypes = [
    'usd',
    'eur',
    'gbp',
    'cad',
    'aud',
    'jpy',
    'inr',
    'sgd',
    'hkd',
    'brl',
];
function isCurrency(currency) {
    return exports.fiatCurrencyTypes.includes(currency);
}
exports.tokenTypes = [
    'arweave',
    'solana',
    'ethereum',
    'kyve',
    'matic',
    'pol',
];
const isNodeUploadFolderParams = (p) => p.folderPath !== undefined;
exports.isNodeUploadFolderParams = isNodeUploadFolderParams;
const isWebUploadFolderParams = (p) => p.files !== undefined;
exports.isWebUploadFolderParams = isWebUploadFolderParams;
function isKyvePrivateKey(wallet) {
    if (typeof wallet !== 'string')
        return false;
    // TODO: Hexadecimal regex
    return true;
}
function isEthPrivateKey(wallet) {
    if (typeof wallet !== 'string')
        return false;
    return wallet.startsWith('0x');
}
const isJWK = (wallet) => wallet.kty !== undefined;
exports.isJWK = isJWK;
function isSolanaWalletAdapter(walletAdapter) {
    return 'publicKey' in walletAdapter && 'signMessage' in walletAdapter;
}
function isEthereumWalletAdapter(walletAdapter) {
    return 'getSigner' in walletAdapter;
}
