"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurboDataItemAbstractSigner = void 0;
/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const amino_1 = require("@cosmjs/amino");
const crypto_1 = require("@cosmjs/crypto");
const encoding_1 = require("@cosmjs/encoding");
const arbundles_1 = require("@dha-team/arbundles");
const signing_key_1 = require("@ethersproject/signing-key");
const sdk_js_1 = require("@kyvejs/sdk/dist/sdk.js");
const bs58_1 = __importDefault(require("bs58"));
const crypto_2 = require("crypto");
const ethers_1 = require("ethers");
const ethers_2 = require("ethers");
const node_buffer_1 = require("node:buffer");
const tweetnacl_1 = __importDefault(require("tweetnacl"));
const types_js_1 = require("../types.js");
const base64_js_1 = require("../utils/base64.js");
const logger_js_1 = require("./logger.js");
/**
 * Abstract class for signing TurboDataItems.
 */
class TurboDataItemAbstractSigner {
    constructor({ signer, logger = logger_js_1.TurboWinstonLogger.default, token, walletAdapter, }) {
        this.logger = logger;
        this.signer = signer;
        this.token = token;
        this.walletAdapter = walletAdapter;
    }
    ownerToNativeAddress(owner, token) {
        switch (token) {
            case 'solana':
                return bs58_1.default.encode(Uint8Array.from((0, base64_js_1.fromB64Url)(owner)));
            case 'ethereum':
            case 'matic':
            case 'pol':
                return (0, ethers_2.computeAddress)((0, signing_key_1.computePublicKey)((0, base64_js_1.fromB64Url)(owner)));
            case 'kyve':
                return (0, amino_1.pubkeyToAddress)({
                    type: 'tendermint/PubKeySecp256k1',
                    value: (0, encoding_1.toBase64)(crypto_1.Secp256k1.compressPubkey(Uint8Array.from((0, base64_js_1.fromB64Url)(owner)))),
                }, 'kyve');
            case 'arweave':
            default:
                return (0, base64_js_1.ownerToAddress)(owner);
        }
    }
    async generateSignedRequestHeaders() {
        const nonce = (0, crypto_2.randomBytes)(16).toString('hex');
        const buffer = node_buffer_1.Buffer.from(nonce);
        const signature = await this.signer.sign(Uint8Array.from(buffer));
        const publicKey = (0, base64_js_1.toB64Url)(this.signer.publicKey);
        return {
            'x-public-key': publicKey,
            'x-nonce': nonce,
            'x-signature': (0, base64_js_1.toB64Url)(node_buffer_1.Buffer.from(signature)),
        };
    }
    async getPublicKey() {
        return this.signer.publicKey;
    }
    async getNativeAddress() {
        return this.ownerToNativeAddress((0, base64_js_1.toB64Url)(await this.getPublicKey()), this.token);
    }
    /** Let the signer handle sending tx for better compat with cross chain libraries/web wallets */
    async sendTransaction({ target, amount, gatewayUrl, }) {
        if (this.walletAdapter) {
            if (!(0, types_js_1.isEthereumWalletAdapter)(this.walletAdapter)) {
                throw new Error('Unsupported wallet adapter -- must implement getSigner');
            }
            const signer = this.walletAdapter.getSigner();
            if (signer.sendTransaction === undefined) {
                throw new Error('Unsupported wallet adapter -- getSigner must return a signer with sendTransaction API for crypto funds transfer');
            }
            const { hash } = await signer.sendTransaction({
                to: target,
                value: (0, ethers_1.parseEther)(amount.toFixed(18)),
            });
            return hash;
        }
        if (!(this.signer instanceof arbundles_1.EthereumSigner)) {
            throw new Error('Only EthereumSigner is supported for sendTransaction API currently!');
        }
        const keyAsStringFromUint8Array = node_buffer_1.Buffer.from(this.signer.key).toString('hex');
        if (this.token === 'kyve') {
            const chainId = gatewayUrl.includes('kaon')
                ? 'kaon-1'
                : gatewayUrl.includes('korellia')
                    ? 'korellia-2'
                    : 'kyve-1';
            // TODO: KYVE Web wallet tx signing/sending
            const client = await new sdk_js_1.KyveSDK(chainId).fromPrivateKey(keyAsStringFromUint8Array);
            const tx = await client.kyve.base.v1beta1.transfer(target, amount.toString());
            await tx.execute();
            return tx.txHash;
        }
        const provider = new ethers_1.ethers.JsonRpcProvider(gatewayUrl);
        const ethWalletAndProvider = new ethers_1.Wallet(keyAsStringFromUint8Array, provider);
        const tx = await ethWalletAndProvider.sendTransaction({
            to: target,
            value: (0, ethers_1.parseEther)(amount.toFixed(18)),
        });
        this.logger.debug('Sent transaction', { tx });
        return tx.hash;
    }
    async signData(dataToSign) {
        if (this.signer instanceof arbundles_1.HexSolanaSigner) {
            const privateKey = this.signer.key;
            const publicKey = Uint8Array.from(await this.getPublicKey());
            // Concatenate the private and public keys correctly
            const combinedKey = new Uint8Array(privateKey.length + publicKey.length);
            combinedKey.set(privateKey);
            combinedKey.set(publicKey, privateKey.length);
            const signature = tweetnacl_1.default.sign.detached(dataToSign, combinedKey);
            return signature;
        }
        return this.signer.sign(dataToSign);
    }
}
exports.TurboDataItemAbstractSigner = TurboDataItemAbstractSigner;
