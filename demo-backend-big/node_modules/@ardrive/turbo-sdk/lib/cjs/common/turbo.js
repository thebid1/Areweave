"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurboAuthenticatedClient = exports.TurboUnauthenticatedClient = exports.defaultTurboConfiguration = exports.developmentTurboConfiguration = void 0;
const payment_js_1 = require("./payment.js");
const upload_js_1 = require("./upload.js");
/**
 * Testing configuration.
 */
exports.developmentTurboConfiguration = {
    paymentServiceConfig: {
        url: payment_js_1.developmentPaymentServiceURL,
    },
    uploadServiceConfig: {
        url: upload_js_1.developmentUploadServiceURL,
    },
};
/**
 * Production configuration.
 */
exports.defaultTurboConfiguration = {
    paymentServiceConfig: {
        url: payment_js_1.defaultPaymentServiceURL,
    },
    uploadServiceConfig: {
        url: upload_js_1.defaultUploadServiceURL,
    },
};
class TurboUnauthenticatedClient {
    constructor({ uploadService = new upload_js_1.TurboUnauthenticatedUploadService({}), paymentService = new payment_js_1.TurboUnauthenticatedPaymentService({}), }) {
        this.paymentService = paymentService;
        this.uploadService = uploadService;
    }
    /**
     * Returns the supported fiat currency conversion rate for 1AR based on current market prices.
     */
    getFiatToAR({ currency, }) {
        return this.paymentService.getFiatToAR({ currency });
    }
    /**
     * Returns the latest conversion rates to purchase 1GiB of data for all supported currencies, including all adjustments and fees.
     *
     * Note: this does not take into account varying adjustments and promotions for different sizes of data. If you want to calculate the total
     * cost in 'winc' for a given number of bytes, use getUploadCosts.
     */
    getFiatRates() {
        return this.paymentService.getFiatRates();
    }
    /**
     * Returns a comprehensive list of supported countries that can purchase credits through the Turbo Payment Service.
     */
    getSupportedCountries() {
        return this.paymentService.getSupportedCountries();
    }
    getBalance(address) {
        return this.paymentService.getBalance(address);
    }
    /**
     * Returns a list of all supported fiat currencies.
     */
    getSupportedCurrencies() {
        return this.paymentService.getSupportedCurrencies();
    }
    /**
     * Determines the price in 'winc' to upload one data item of a specific size in bytes, including all Turbo cost adjustments and fees.
     */
    getUploadCosts({ bytes, }) {
        return this.paymentService.getUploadCosts({ bytes });
    }
    /**
     * Determines the amount of 'winc' that would be returned for a given currency and amount, including all Turbo cost adjustments and fees.
     */
    getWincForFiat(params) {
        return this.paymentService.getWincForFiat(params);
    }
    /**
     * Determines the amount of 'winc' that would be returned for a given token and amount, including all Turbo cost adjustments and fees.
     */
    getWincForToken(params) {
        return this.paymentService.getWincForToken(params);
    }
    /**
     * Determines the price in the instantiated token to upload one data item of a specific size in bytes, including all Turbo cost adjustments and fees.
     */
    getTokenPriceForBytes({ byteCount, }) {
        return this.paymentService.getTokenPriceForBytes({ byteCount });
    }
    /**
     * Uploads a signed data item to the Turbo Upload Service.
     */
    uploadSignedDataItem({ dataItemStreamFactory, dataItemSizeFactory, signal, }) {
        return this.uploadService.uploadSignedDataItem({
            dataItemStreamFactory,
            dataItemSizeFactory,
            signal,
        });
    }
    /**
     * Creates a Turbo Checkout Session for a given amount and currency.
     */
    createCheckoutSession(params) {
        return this.paymentService.createCheckoutSession(params);
    }
    /**
     * Submits a transaction ID to the Turbo Payment Service for processing.
     */
    submitFundTransaction(p) {
        return this.paymentService.submitFundTransaction(p);
    }
    /**
     * Returns the connected target Turbo wallet addresses for all supported tokens.
     */
    async getTurboCryptoWallets() {
        const wallets = await this.paymentService.getTurboCryptoWallets();
        wallets.pol = wallets.matic;
        return wallets;
    }
    /**
     * Returns a list of all credit share approvals for the user.
     */
    getCreditShareApprovals(p) {
        return this.paymentService.getCreditShareApprovals(p);
    }
}
exports.TurboUnauthenticatedClient = TurboUnauthenticatedClient;
class TurboAuthenticatedClient extends TurboUnauthenticatedClient {
    constructor({ paymentService, uploadService, signer, }) {
        super({ paymentService, uploadService });
        this.signer = signer;
    }
    /**
     * Returns the current balance of the user's wallet in 'winc'.
     */
    getBalance(userAddress) {
        return this.paymentService.getBalance(userAddress);
    }
    /**
     * Returns a list of all credit share approvals for the user.
     */
    getCreditShareApprovals(p = {}) {
        return this.paymentService.getCreditShareApprovals(p);
    }
    /**
     * Signs and uploads raw data to the Turbo Upload Service.
     */
    uploadFile({ fileStreamFactory, fileSizeFactory, signal, dataItemOpts, }) {
        return this.uploadService.uploadFile({
            fileStreamFactory,
            fileSizeFactory,
            signal,
            dataItemOpts,
        });
    }
    uploadFolder(p) {
        return this.uploadService.uploadFolder(p);
    }
    /**
     * Submits fund transaction to the token's blockchain then sends
     * the transaction ID to the Turbo Payment Service for processing.
     */
    topUpWithTokens(p) {
        return this.paymentService.topUpWithTokens(p);
    }
    /**
     * Creates a data item with tags that designate it as a credit share approval.
     * Signs the data item and sends it to the Turbo Upload Service, which will verify
     * the signature and forward the admin action towards the Turbo Payment Service.
     */
    shareCredits(p) {
        return this.uploadService.shareCredits(p);
    }
    /**
     * Creates a data item with tags that designate it as a revoke action for credit
     * share approvals for target revokedAddress. Signs the data item and sends it to
     * the Turbo Upload Service, which will verify the signature and forward the admin
     * action towards the Turbo Payment Service.
     */
    revokeCredits(p) {
        return this.uploadService.revokeCredits(p);
    }
}
exports.TurboAuthenticatedClient = TurboAuthenticatedClient;
