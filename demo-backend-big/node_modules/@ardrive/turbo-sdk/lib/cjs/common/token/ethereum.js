"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthereumToken = exports.ETHToTokenAmount = exports.weiToTokenAmount = void 0;
/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const bignumber_js_1 = require("bignumber.js");
const ethers_1 = require("ethers");
const logger_js_1 = require("../logger.js");
const weiToTokenAmount = (wei) => wei;
exports.weiToTokenAmount = weiToTokenAmount;
const ETHToTokenAmount = (eth) => new bignumber_js_1.BigNumber(eth).times(1e18).valueOf();
exports.ETHToTokenAmount = ETHToTokenAmount;
class EthereumToken {
    constructor({ logger = logger_js_1.TurboWinstonLogger.default, gatewayUrl = 'https://cloudflare-eth.com/', pollingOptions = {
        maxAttempts: 10,
        pollingIntervalMs: 4_000,
        initialBackoffMs: 10_000,
    }, } = {}) {
        this.logger = logger;
        this.gatewayUrl = gatewayUrl;
        this.pollingOptions = pollingOptions;
        this.rpcProvider = new ethers_1.ethers.JsonRpcProvider(gatewayUrl);
    }
    async createAndSubmitTx({ target, tokenAmount, signer, }) {
        // convert wei to eth
        const eth = tokenAmount.shiftedBy(-18);
        const txId = await signer.sendTransaction({
            target,
            amount: eth,
            gatewayUrl: this.gatewayUrl,
        });
        return {
            id: txId,
            target,
        };
    }
    async pollForTxBeingAvailable({ txId, }) {
        await new Promise((resolve) => setTimeout(resolve, this.pollingOptions.initialBackoffMs));
        let attempts = 0;
        while (attempts < this.pollingOptions.maxAttempts) {
            try {
                const tx = await this.rpcProvider.getTransaction(txId);
                if (tx) {
                    return;
                }
            }
            catch (e) {
                this.logger.debug('Error polling for tx', { txId, e });
            }
            await new Promise((resolve) => setTimeout(resolve, this.pollingOptions.pollingIntervalMs));
            attempts++;
        }
        throw new Error('Transaction not found after polling!');
    }
}
exports.EthereumToken = EthereumToken;
