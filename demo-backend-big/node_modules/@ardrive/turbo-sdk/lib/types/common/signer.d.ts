import { Buffer } from 'node:buffer';
import { FileStreamFactory, NativeAddress, SendTxWithSignerParams, TokenType, TurboDataItemSigner, TurboDataItemSignerParams, TurboFileFactory, TurboLogger, TurboSignedDataItemFactory, TurboSigner, WalletAdapter } from '../types.js';
/**
 * Abstract class for signing TurboDataItems.
 */
export declare abstract class TurboDataItemAbstractSigner implements TurboDataItemSigner {
    abstract signDataItem({ fileStreamFactory, fileSizeFactory, dataItemOpts, }: TurboFileFactory<FileStreamFactory>): Promise<TurboSignedDataItemFactory>;
    protected logger: TurboLogger;
    protected signer: TurboSigner;
    protected token: TokenType;
    protected walletAdapter: WalletAdapter | undefined;
    constructor({ signer, logger, token, walletAdapter, }: TurboDataItemSignerParams);
    private ownerToNativeAddress;
    generateSignedRequestHeaders(): Promise<{
        'x-public-key': string;
        'x-nonce': string;
        'x-signature': string;
    }>;
    getPublicKey(): Promise<Buffer>;
    getNativeAddress(): Promise<NativeAddress>;
    /** Let the signer handle sending tx for better compat with cross chain libraries/web wallets */
    sendTransaction({ target, amount, gatewayUrl, }: SendTxWithSignerParams): Promise<string>;
    signData(dataToSign: Uint8Array): Promise<Uint8Array>;
}
//# sourceMappingURL=signer.d.ts.map