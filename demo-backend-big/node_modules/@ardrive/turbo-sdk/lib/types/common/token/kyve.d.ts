import { BigNumber } from 'bignumber.js';
import { TokenConfig, TokenCreateTxParams, TokenPollingOptions, TokenTools, TurboLogger, TurboSigner } from '../../types.js';
export declare const ukyveToTokenAmount: (winston: BigNumber.Value) => BigNumber.Value;
export declare const KYVEToTokenAmount: (sol: BigNumber.Value) => string;
export declare class KyveToken implements TokenTools {
    protected logger: TurboLogger;
    protected gatewayUrl: string;
    protected pollingOptions: TokenPollingOptions;
    constructor({ logger, gatewayUrl, pollingOptions, }: TokenConfig);
    createAndSubmitTx({ target, tokenAmount, signer, }: TokenCreateTxParams): Promise<{
        id: string;
        target: string;
    }>;
    pollForTxBeingAvailable({ txId, }: {
        txId: string;
    }): Promise<void>;
}
export declare function signerFromKyvePrivateKey(privateKey: string): TurboSigner;
export declare function privateKeyFromKyveMnemonic(mnemonic: string): Promise<string>;
export declare function signerFromKyveMnemonic(mnemonic: string): Promise<TurboSigner>;
//# sourceMappingURL=kyve.d.ts.map