/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Buffer } from 'node:buffer';
import { Readable } from 'node:stream';
import { ArweaveManifest, CreditShareApproval, TokenType, TurboAbortSignal, TurboAuthenticatedUploadServiceConfiguration, TurboAuthenticatedUploadServiceInterface, TurboCreateCreditShareApprovalParams, TurboDataItemSigner, TurboFileFactory, TurboLogger, TurboRevokeCreditsParams, TurboSignedDataItemFactory, TurboUnauthenticatedUploadServiceConfiguration, TurboUnauthenticatedUploadServiceInterface, TurboUploadDataItemResponse, TurboUploadFolderParams, TurboUploadFolderResponse } from '../types.js';
import { TurboHTTPService } from './http.js';
export declare const creditSharingTagNames: {
    shareCredits: string;
    sharedWincAmount: string;
    approvalExpiresBySeconds: string;
    revokeCredits: string;
};
export declare const developmentUploadServiceURL = "https://upload.ardrive.dev";
export declare const defaultUploadServiceURL = "https://upload.ardrive.io";
export declare class TurboUnauthenticatedUploadService implements TurboUnauthenticatedUploadServiceInterface {
    protected httpService: TurboHTTPService;
    protected logger: TurboLogger;
    protected token: TokenType;
    constructor({ url, retryConfig, logger, token, }: TurboUnauthenticatedUploadServiceConfiguration);
    uploadSignedDataItem({ dataItemStreamFactory, dataItemSizeFactory, signal, }: TurboSignedDataItemFactory & TurboAbortSignal): Promise<TurboUploadDataItemResponse>;
}
export declare abstract class TurboAuthenticatedBaseUploadService extends TurboUnauthenticatedUploadService implements TurboAuthenticatedUploadServiceInterface {
    protected signer: TurboDataItemSigner;
    constructor({ url, retryConfig, signer, logger, token, }: TurboAuthenticatedUploadServiceConfiguration);
    uploadFile({ fileStreamFactory, fileSizeFactory, signal, dataItemOpts, }: TurboFileFactory & TurboAbortSignal): Promise<TurboUploadDataItemResponse>;
    protected generateManifest({ paths, indexFile, fallbackFile, }: {
        paths: Record<string, {
            id: string;
        }>;
        indexFile?: string;
        fallbackFile?: string;
    }): Promise<ArweaveManifest>;
    abstract getFiles(params: TurboUploadFolderParams): Promise<(File | string)[]>;
    abstract contentTypeFromFile(file: File | string): string;
    abstract getFileStreamForFile(file: string | File): Readable | ReadableStream;
    abstract getFileSize(file: string | File): number;
    abstract getRelativePath(file: string | File, params: TurboUploadFolderParams): string;
    abstract createManifestStream(manifestBuffer: Buffer): Readable | ReadableStream;
    private getContentType;
    uploadFolder(params: TurboUploadFolderParams): Promise<TurboUploadFolderResponse>;
    shareCredits({ approvedAddress, approvedWincAmount, expiresBySeconds, }: TurboCreateCreditShareApprovalParams): Promise<CreditShareApproval>;
    revokeCredits({ revokedAddress, }: TurboRevokeCreditsParams): Promise<CreditShareApproval[]>;
}
//# sourceMappingURL=upload.d.ts.map