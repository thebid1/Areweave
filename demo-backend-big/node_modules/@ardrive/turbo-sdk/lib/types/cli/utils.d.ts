import { Command, OptionValues } from 'commander';
import { TokenType, TurboAuthenticatedClient, TurboUnauthenticatedConfiguration } from '../node/index.js';
import { AddressOptions, GlobalOptions, UploadFolderOptions, UploadOptions, WalletOptions } from './types.js';
export declare function exitWithErrorLog(error: unknown): void;
export declare function runCommand<O extends OptionValues>(command: Command, action: (options: O) => Promise<void>): Promise<void>;
interface CommanderOption {
    alias: string;
    description: string;
    default?: string | boolean;
}
export declare function applyOptions(command: Command, options: CommanderOption[]): Command;
export declare function tokenFromOptions(options: unknown): TokenType;
export declare function valueFromOptions(options: unknown): string;
export declare function getFolderPathFromOptions(options: unknown): string;
export declare function addressOrPrivateKeyFromOptions(options: AddressOptions): Promise<{
    address: string | undefined;
    privateKey: string | undefined;
}>;
export declare function optionalPrivateKeyFromOptions(options: WalletOptions): Promise<string | undefined>;
export declare function privateKeyFromOptions({ mnemonic, privateKey, walletFile, token, }: WalletOptions): Promise<string>;
export declare function configFromOptions(options: GlobalOptions): TurboUnauthenticatedConfiguration;
export declare function turboFromOptions(options: WalletOptions): Promise<TurboAuthenticatedClient>;
export declare function paidByFromOptions({ paidBy: paidByCliInput, ignoreApprovals, useSignerBalanceFirst, }: UploadOptions, turbo: TurboAuthenticatedClient): Promise<string[] | undefined>;
export declare function getUploadFolderOptions(options: UploadFolderOptions): {
    folderPath: string;
    indexFile: string | undefined;
    fallbackFile: string | undefined;
    disableManifest: boolean;
    maxConcurrentUploads: number;
};
export {};
//# sourceMappingURL=utils.d.ts.map