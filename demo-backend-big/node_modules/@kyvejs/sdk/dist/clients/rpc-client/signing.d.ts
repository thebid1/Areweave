import { StdFee } from "@cosmjs/amino/build/signdoc";
import { AccountData, EncodeObject } from "@cosmjs/proto-signing";
import { SigningStargateClient } from "@cosmjs/stargate";
import { IConfig } from "../../constants";
export interface IBasePendingTx {
    tx: EncodeObject[];
}
export declare class PendingTx<T> implements PromiseLike<T>, IBasePendingTx {
    readonly tx: EncodeObject[];
    private executor;
    constructor(options: {
        tx: EncodeObject[];
    }, executor: () => Promise<T>);
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => PromiseLike<TResult1> | TResult1) | undefined | null, onrejected?: ((reason: any) => PromiseLike<TResult2> | TResult2) | undefined | null): Promise<TResult1 | TResult2>;
    catch<TResult = never>(onrejected?: ((reason: any) => PromiseLike<TResult> | TResult) | undefined | null): Promise<T | TResult>;
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}
type SignedTx = {
    tx: EncodeObject[];
    txRawBytes: Uint8Array;
    fee: StdFee;
};
export declare class PendingSignedTx implements IBasePendingTx {
    private nativeClient;
    private txBytes;
    readonly txHash: string;
    readonly fee: StdFee;
    readonly tx: EncodeObject[];
    constructor(nativeClient: SigningStargateClient, tx: SignedTx);
    execute(): Promise<import("@cosmjs/stargate").DeliverTxResponse>;
}
export declare class KyveSigning {
    nativeClient: SigningStargateClient;
    readonly account: AccountData;
    readonly config: IConfig;
    constructor(client: SigningStargateClient, account: AccountData, config: IConfig);
    getPendingSignedTx(tx: EncodeObject | EncodeObject[], options?: {
        fee?: StdFee | "auto" | number;
        memo?: string;
    }): Promise<PendingSignedTx>;
    signTx(tx: EncodeObject | EncodeObject[], options?: {
        fee?: StdFee | "auto" | number;
        memo?: string;
    }): Promise<SignedTx>;
}
export {};
