"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateMerkleRoot = exports.dataItemToSha256 = exports.createHashesFromBundle = void 0;
var crypto = __importStar(require("@cosmjs/crypto"));
function createHashesFromBundle(bundle) {
    return bundle.map(function (dataItem) { return dataItemToSha256(dataItem); });
}
exports.createHashesFromBundle = createHashesFromBundle;
function dataItemToSha256(data) {
    // Encode the serialized object to UTF-8
    var encoded_obj = Buffer.from(JSON.stringify(data), "utf-8");
    // Calculate the SHA-256 hash
    return crypto.sha256(encoded_obj);
}
exports.dataItemToSha256 = dataItemToSha256;
function generateMerkleRoot(hashes) {
    if (!hashes || hashes.length == 0) {
        return Buffer.from("");
    }
    // Ensure number of hashes (leafs) are even by copying the
    // last hash (the very right leaf) if the amount is odd
    if (hashes.length % 2 !== 0) {
        hashes.push(hashes[hashes.length - 1]);
    }
    var combinedHashes = [];
    for (var i = 0; i < hashes.length; i += 2) {
        var hashesConcatenated = new Uint8Array(__spreadArray(__spreadArray([], Array.from(hashes[i]), true), Array.from(hashes[i + 1]), true));
        var hash = crypto.sha256(hashesConcatenated);
        combinedHashes.push(hash);
    }
    // If the combinedHashes length is 1, it means that we have the merkle root already,
    // and we can return the hex representation
    if (combinedHashes.length === 1) {
        return combinedHashes[0];
    }
    return generateMerkleRoot(combinedHashes);
}
exports.generateMerkleRoot = generateMerkleRoot;
//# sourceMappingURL=merkle.js.map