"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBundlesAminoConverters = void 0;
var utils_1 = require("../utils");
var createBundlesAminoConverters = function () {
    return {
        "/kyve.bundles.v1beta1.MsgSubmitBundleProposal": {
            aminoType: "kyve/bundles/MsgSubmitBundleProposal",
            toAmino: function (msg) { return (__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ creator: msg.creator, staker: msg.staker }, ((0, utils_1.isNotEmpty)(msg.pool_id) && { pool_id: msg.pool_id })), ((0, utils_1.isNotEmpty)(msg.storage_id) && { storage_id: msg.storage_id })), ((0, utils_1.isNotEmpty)(msg.data_size) && { data_size: msg.data_size })), ((0, utils_1.isNotEmpty)(msg.data_hash) && { data_hash: msg.data_hash })), ((0, utils_1.isNotEmpty)(msg.from_index) && { from_index: msg.from_index })), ((0, utils_1.isNotEmpty)(msg.bundle_size) && { bundle_size: msg.bundle_size })), ((0, utils_1.isNotEmpty)(msg.from_key) && { from_key: msg.from_key })), ((0, utils_1.isNotEmpty)(msg.to_key) && { to_key: msg.to_key })), ((0, utils_1.isNotEmpty)(msg.bundle_summary) && {
                bundle_summary: msg.bundle_summary,
            }))); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                staker: msg.staker,
                pool_id: msg.pool_id,
                storage_id: msg.storage_id,
                data_size: msg.data_size,
                data_hash: msg.data_hash,
                from_index: msg.from_index,
                bundle_size: msg.bundle_size,
                from_key: msg.from_key,
                to_key: msg.to_key,
                bundle_summary: msg.bundle_summary,
            }); },
        },
        "/kyve.bundles.v1beta1.MsgVoteBundleProposal": {
            aminoType: "kyve/bundles/MsgVoteBundleProposal",
            toAmino: function (msg) { return (__assign(__assign(__assign({ creator: msg.creator, staker: msg.staker }, ((0, utils_1.isNotEmpty)(msg.pool_id) && { pool_id: msg.pool_id })), ((0, utils_1.isNotEmpty)(msg.storage_id) && { storage_id: msg.storage_id })), { vote: msg.vote })); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                staker: msg.staker,
                pool_id: msg.pool_id,
                storage_id: msg.storage_id,
                vote: msg.vote,
            }); },
        },
        "/kyve.bundles.v1beta1.MsgClaimUploaderRole": {
            aminoType: "kyve/bundles/MsgClaimUploaderRole",
            toAmino: function (msg) { return (__assign({ creator: msg.creator, staker: msg.staker }, ((0, utils_1.isNotEmpty)(msg.pool_id) && { pool_id: msg.pool_id }))); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                staker: msg.staker,
                pool_id: msg.pool_id,
            }); },
        },
        "/kyve.bundles.v1beta1.MsgSkipUploaderRole": {
            aminoType: "kyve/bundles/MsgSkipUploaderRole",
            toAmino: function (msg) { return (__assign(__assign({ creator: msg.creator, staker: msg.staker }, ((0, utils_1.isNotEmpty)(msg.pool_id) && { pool_id: msg.pool_id })), ((0, utils_1.isNotEmpty)(msg.from_index) && { from_index: msg.from_index }))); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                staker: msg.staker,
                pool_id: msg.pool_id,
                from_index: msg.from_index,
            }); },
        },
    };
};
exports.createBundlesAminoConverters = createBundlesAminoConverters;
//# sourceMappingURL=bundles.amino.js.map