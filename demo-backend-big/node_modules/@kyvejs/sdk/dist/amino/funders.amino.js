"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFundersAminoConverters = void 0;
var utils_1 = require("../utils");
var createFundersAminoConverters = function () {
    return {
        "/kyve.funders.v1beta1.MsgFundPool": {
            aminoType: "/kyve.funders.v1beta1.MsgFundPool",
            toAmino: function (msg) { return (__assign(__assign({ creator: msg.creator }, ((0, utils_1.isNotEmpty)(msg.pool_id) && { pool_id: msg.pool_id })), { amounts: __spreadArray([], msg.amounts, true), amounts_per_bundle: __spreadArray([], msg.amounts_per_bundle, true) })); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                pool_id: msg.pool_id,
                amounts: __spreadArray([], msg.amounts, true),
                amounts_per_bundle: __spreadArray([], msg.amounts_per_bundle, true),
            }); },
        },
        "/kyve.funders.v1beta1.MsgDefundPool": {
            aminoType: "/kyve.funders.v1beta1.MsgDefundPool",
            toAmino: function (msg) { return (__assign(__assign({ creator: msg.creator }, ((0, utils_1.isNotEmpty)(msg.pool_id) && { id: msg.pool_id })), { amounts: __spreadArray([], msg.amounts, true) })); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                pool_id: msg.pool_id,
                amounts: __spreadArray([], msg.amounts, true),
            }); },
        },
        "/kyve.funders.v1beta1.MsgCreateFunder": {
            aminoType: "/kyve.funders.v1beta1.MsgCreateFunder",
            toAmino: function (msg) { return (__assign(__assign(__assign(__assign(__assign({ creator: msg.creator }, ((0, utils_1.isNotEmpty)(msg.moniker) && { moniker: msg.moniker })), ((0, utils_1.isNotEmpty)(msg.description) && { description: msg.description })), ((0, utils_1.isNotEmpty)(msg.website) && { website: msg.website })), ((0, utils_1.isNotEmpty)(msg.identity) && { identity: msg.identity })), ((0, utils_1.isNotEmpty)(msg.contact) && { contact: msg.contact }))); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                moniker: msg.moniker,
                description: msg.description,
                website: msg.website,
                identity: msg.identity,
                contact: msg.contact,
            }); },
        },
        "/kyve.funders.v1beta1.MsgUpdateFunder": {
            aminoType: "/kyve.funders.v1beta1.MsgUpdateFunder",
            toAmino: function (msg) { return (__assign(__assign(__assign(__assign(__assign({ creator: msg.creator }, ((0, utils_1.isNotEmpty)(msg.moniker) && { moniker: msg.moniker })), ((0, utils_1.isNotEmpty)(msg.description) && { description: msg.description })), ((0, utils_1.isNotEmpty)(msg.website) && { website: msg.website })), ((0, utils_1.isNotEmpty)(msg.identity) && { identity: msg.identity })), ((0, utils_1.isNotEmpty)(msg.contact) && { contact: msg.contact }))); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                moniker: msg.moniker,
                description: msg.description,
                website: msg.website,
                identity: msg.identity,
                contact: msg.contact,
            }); },
        },
    };
};
exports.createFundersAminoConverters = createFundersAminoConverters;
//# sourceMappingURL=funders.amino.js.map