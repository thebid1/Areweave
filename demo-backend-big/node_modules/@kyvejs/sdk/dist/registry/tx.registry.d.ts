import { GeneratedType, Registry } from "@cosmjs/proto-signing";
/** bundles **/
import { MsgSubmitBundleProposal } from "@kyvejs/types/client/kyve/bundles/v1beta1/tx";
import { MsgVoteBundleProposal } from "@kyvejs/types/client/kyve/bundles/v1beta1/tx";
import { MsgClaimUploaderRole } from "@kyvejs/types/client/kyve/bundles/v1beta1/tx";
import { MsgSkipUploaderRole } from "@kyvejs/types/client/kyve/bundles/v1beta1/tx";
import { MsgUpdateParams as MsgUpdateParamsBundles } from "@kyvejs/types/client/kyve/bundles/v1beta1/tx";
/** delegations **/
import { MsgDelegate } from "@kyvejs/types/client/kyve/delegation/v1beta1/tx";
import { MsgWithdrawRewards } from "@kyvejs/types/client/kyve/delegation/v1beta1/tx";
import { MsgRedelegate } from "@kyvejs/types/client/kyve/delegation/v1beta1/tx";
import { MsgUndelegate } from "@kyvejs/types/client/kyve/delegation/v1beta1/tx";
import { MsgUpdateParams as MsgUpdateParamsDelegation } from "@kyvejs/types/client/kyve/delegation/v1beta1/tx";
import { MsgFundPool } from "@kyvejs/types/client/kyve/funders/v1beta1/tx";
import { MsgDefundPool } from "@kyvejs/types/client/kyve/funders/v1beta1/tx";
/** fees **/
import { MsgUpdateParams as MsgUpdateParamsGlobal } from "@kyvejs/types/client/kyve/global/v1beta1/tx";
import { MsgCreatePool } from "@kyvejs/types/client/kyve/pool/v1beta1/tx";
import { MsgUpdatePool } from "@kyvejs/types/client/kyve/pool/v1beta1/tx";
import { MsgDisablePool } from "@kyvejs/types/client/kyve/pool/v1beta1/tx";
import { MsgEnablePool } from "@kyvejs/types/client/kyve/pool/v1beta1/tx";
import { MsgScheduleRuntimeUpgrade } from "@kyvejs/types/client/kyve/pool/v1beta1/tx";
import { MsgCancelRuntimeUpgrade } from "@kyvejs/types/client/kyve/pool/v1beta1/tx";
/** stakers **/
import { MsgClaimCommissionRewards, MsgCreateStaker } from "@kyvejs/types/client/kyve/stakers/v1beta1/tx";
import { MsgUpdateMetadata } from "@kyvejs/types/client/kyve/stakers/v1beta1/tx";
import { MsgJoinPool } from "@kyvejs/types/client/kyve/stakers/v1beta1/tx";
import { MsgUpdateCommission } from "@kyvejs/types/client/kyve/stakers/v1beta1/tx";
import { MsgLeavePool } from "@kyvejs/types/client/kyve/stakers/v1beta1/tx";
import { MsgUpdateParams as MsgUpdateParamsStakers } from "@kyvejs/types/client/kyve/stakers/v1beta1/tx";
/** funders **/
import { MsgCreateFunder } from "@kyvejs/types/lcd/kyve/funders/v1beta1/tx";
import { MsgUpdateFunder } from "@kyvejs/types/lcd/kyve/funders/v1beta1/tx";
export declare const registry: ReadonlyArray<[string, GeneratedType]>;
export declare const load: (protoRegistry: Registry) => void;
export declare const encodeTxMsg: {
    createFunder(value: MsgCreateFunder): {
        type_url: string;
        value: Uint8Array;
    };
    updateFunder(value: MsgUpdateFunder): {
        type_url: string;
        value: Uint8Array;
    };
    fundPool(value: MsgFundPool): {
        type_url: string;
        value: Uint8Array;
    };
    defundPool(value: MsgDefundPool): {
        type_url: string;
        value: Uint8Array;
    };
    createPool(value: MsgCreatePool): {
        type_url: string;
        value: Uint8Array;
    };
    updatePool(value: MsgUpdatePool): {
        type_url: string;
        value: Uint8Array;
    };
    disablePool(value: MsgDisablePool): {
        type_url: string;
        value: Uint8Array;
    };
    enablePool(value: MsgEnablePool): {
        type_url: string;
        value: Uint8Array;
    };
    scheduleRuntimeUpgrade(value: MsgScheduleRuntimeUpgrade): {
        type_url: string;
        value: Uint8Array;
    };
    cancelRuntimeUpgrade(value: MsgCancelRuntimeUpgrade): {
        type_url: string;
        value: Uint8Array;
    };
    createStaker(value: MsgCreateStaker): {
        type_url: string;
        value: Uint8Array;
    };
    updateMetadata(value: MsgUpdateMetadata): {
        type_url: string;
        value: Uint8Array;
    };
    updateCommission(value: MsgUpdateCommission): {
        type_url: string;
        value: Uint8Array;
    };
    claimCommissionRewards(value: MsgClaimCommissionRewards): {
        type_url: string;
        value: Uint8Array;
    };
    joinPool(value: MsgJoinPool): {
        type_url: string;
        value: Uint8Array;
    };
    leavePool(value: MsgJoinPool): {
        type_url: string;
        value: Uint8Array;
    };
    delegate(value: MsgDelegate): {
        type_url: string;
        value: Uint8Array;
    };
    withdrawRewards(value: MsgWithdrawRewards): {
        type_url: string;
        value: Uint8Array;
    };
    undelegate(value: MsgUndelegate): {
        type_url: string;
        value: Uint8Array;
    };
    redelegate(value: MsgRedelegate): {
        type_url: string;
        value: Uint8Array;
    };
    submitBundleProposal(value: MsgSubmitBundleProposal): {
        type_url: string;
        value: Uint8Array;
    };
    voteBundleProposal(value: MsgVoteBundleProposal): {
        type_url: string;
        value: Uint8Array;
    };
    claimUploaderRole(value: MsgClaimUploaderRole): {
        type_url: string;
        value: Uint8Array;
    };
    updateParamsStakers(value: MsgUpdateParamsStakers): {
        type_url: string;
        value: Uint8Array;
    };
    updateParamsDelegation(value: MsgUpdateParamsDelegation): {
        type_url: string;
        value: Uint8Array;
    };
    updateParamsBundles(value: MsgUpdateParamsBundles): {
        type_url: string;
        value: Uint8Array;
    };
    updateParamsGlobal(value: MsgUpdateParamsGlobal): {
        type_url: string;
        value: Uint8Array;
    };
};
export declare const withTypeUrl: {
    createFunder(value: MsgCreateFunder): {
        typeUrl: string;
        value: MsgCreateFunder;
    };
    updateFunder(value: MsgUpdateFunder): {
        typeUrl: string;
        value: MsgUpdateFunder;
    };
    fundPool(value: MsgFundPool): {
        typeUrl: string;
        value: MsgFundPool;
    };
    defundPool(value: MsgDefundPool): {
        typeUrl: string;
        value: MsgDefundPool;
    };
    createPool(value: MsgCreatePool): {
        typeUrl: string;
        value: MsgCreatePool;
    };
    updatePool(value: MsgUpdatePool): {
        typeUrl: string;
        value: MsgUpdatePool;
    };
    disablePool(value: MsgDisablePool): {
        typeUrl: string;
        value: MsgDisablePool;
    };
    enablePool(value: MsgEnablePool): {
        typeUrl: string;
        value: MsgEnablePool;
    };
    scheduleRuntimeUpgrade(value: MsgScheduleRuntimeUpgrade): {
        typeUrl: string;
        value: MsgScheduleRuntimeUpgrade;
    };
    cancelRuntimeUpgrade(value: MsgCancelRuntimeUpgrade): {
        typeUrl: string;
        value: MsgCancelRuntimeUpgrade;
    };
    createStaker(value: MsgCreateStaker): {
        typeUrl: string;
        value: MsgCreateStaker;
    };
    updateMetadata(value: MsgUpdateMetadata): {
        typeUrl: string;
        value: MsgUpdateMetadata;
    };
    updateCommission(value: MsgUpdateCommission): {
        typeUrl: string;
        value: MsgUpdateCommission;
    };
    claimCommissionRewards(value: MsgClaimCommissionRewards): {
        typeUrl: string;
        value: MsgClaimCommissionRewards;
    };
    joinPool(value: MsgJoinPool): {
        typeUrl: string;
        value: MsgJoinPool;
    };
    leavePool(value: MsgLeavePool): {
        typeUrl: string;
        value: MsgLeavePool;
    };
    delegate(value: MsgDelegate): {
        typeUrl: string;
        value: MsgDelegate;
    };
    withdrawRewards(value: MsgWithdrawRewards): {
        typeUrl: string;
        value: MsgWithdrawRewards;
    };
    undelegate(value: MsgUndelegate): {
        typeUrl: string;
        value: MsgUndelegate;
    };
    redelegate(value: MsgRedelegate): {
        typeUrl: string;
        value: MsgRedelegate;
    };
    submitBundleProposal(value: MsgSubmitBundleProposal): {
        typeUrl: string;
        value: MsgSubmitBundleProposal;
    };
    voteBundleProposal(value: MsgVoteBundleProposal): {
        typeUrl: string;
        value: MsgVoteBundleProposal;
    };
    skipUploaderRole(value: MsgSkipUploaderRole): {
        typeUrl: string;
        value: MsgSkipUploaderRole;
    };
    claimUploaderRole(value: MsgClaimUploaderRole): {
        typeUrl: string;
        value: MsgClaimUploaderRole;
    };
    updateParamsStakers(value: MsgUpdateParamsStakers): {
        typeUrl: string;
        value: MsgUpdateParamsStakers;
    };
    updateParamsDelegation(value: MsgUpdateParamsDelegation): {
        typeUrl: string;
        value: MsgUpdateParamsDelegation;
    };
    updateParamsBundles(value: MsgUpdateParamsBundles): {
        typeUrl: string;
        value: MsgUpdateParamsBundles;
    };
    updateParamsGlobal(value: MsgUpdateParamsGlobal): {
        typeUrl: string;
        value: MsgUpdateParamsGlobal;
    };
};
