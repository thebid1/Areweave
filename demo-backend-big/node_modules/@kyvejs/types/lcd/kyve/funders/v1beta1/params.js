"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: kyve/funders/v1beta1/params.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.WhitelistCoinEntry = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "kyve.funders.v1beta1";
function createBaseWhitelistCoinEntry() {
    return {
        coin_denom: "",
        coin_decimals: 0,
        min_funding_amount: "",
        min_funding_amount_per_bundle: "",
        coin_weight: "",
    };
}
exports.WhitelistCoinEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.coin_denom !== "") {
            writer.uint32(10).string(message.coin_denom);
        }
        if (message.coin_decimals !== 0) {
            writer.uint32(16).uint32(message.coin_decimals);
        }
        if (message.min_funding_amount !== "") {
            writer.uint32(26).string(message.min_funding_amount);
        }
        if (message.min_funding_amount_per_bundle !== "") {
            writer.uint32(34).string(message.min_funding_amount_per_bundle);
        }
        if (message.coin_weight !== "") {
            writer.uint32(42).string(message.coin_weight);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseWhitelistCoinEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.coin_denom = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.coin_decimals = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.min_funding_amount = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.min_funding_amount_per_bundle = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.coin_weight = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            coin_denom: isSet(object.coin_denom) ? globalThis.String(object.coin_denom) : "",
            coin_decimals: isSet(object.coin_decimals) ? globalThis.Number(object.coin_decimals) : 0,
            min_funding_amount: isSet(object.min_funding_amount) ? globalThis.String(object.min_funding_amount) : "",
            min_funding_amount_per_bundle: isSet(object.min_funding_amount_per_bundle)
                ? globalThis.String(object.min_funding_amount_per_bundle)
                : "",
            coin_weight: isSet(object.coin_weight) ? globalThis.String(object.coin_weight) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.coin_denom !== "") {
            obj.coin_denom = message.coin_denom;
        }
        if (message.coin_decimals !== 0) {
            obj.coin_decimals = Math.round(message.coin_decimals);
        }
        if (message.min_funding_amount !== "") {
            obj.min_funding_amount = message.min_funding_amount;
        }
        if (message.min_funding_amount_per_bundle !== "") {
            obj.min_funding_amount_per_bundle = message.min_funding_amount_per_bundle;
        }
        if (message.coin_weight !== "") {
            obj.coin_weight = message.coin_weight;
        }
        return obj;
    },
    create: function (base) {
        return exports.WhitelistCoinEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseWhitelistCoinEntry();
        message.coin_denom = (_a = object.coin_denom) !== null && _a !== void 0 ? _a : "";
        message.coin_decimals = (_b = object.coin_decimals) !== null && _b !== void 0 ? _b : 0;
        message.min_funding_amount = (_c = object.min_funding_amount) !== null && _c !== void 0 ? _c : "";
        message.min_funding_amount_per_bundle = (_d = object.min_funding_amount_per_bundle) !== null && _d !== void 0 ? _d : "";
        message.coin_weight = (_e = object.coin_weight) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseParams() {
    return { coin_whitelist: [], min_funding_multiple: "0" };
}
exports.Params = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        for (var _i = 0, _a = message.coin_whitelist; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.WhitelistCoinEntry.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.min_funding_multiple !== "0") {
            writer.uint32(16).uint64(message.min_funding_multiple);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.coin_whitelist.push(exports.WhitelistCoinEntry.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.min_funding_multiple = longToString(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            coin_whitelist: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.coin_whitelist)
                ? object.coin_whitelist.map(function (e) { return exports.WhitelistCoinEntry.fromJSON(e); })
                : [],
            min_funding_multiple: isSet(object.min_funding_multiple) ? globalThis.String(object.min_funding_multiple) : "0",
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if ((_a = message.coin_whitelist) === null || _a === void 0 ? void 0 : _a.length) {
            obj.coin_whitelist = message.coin_whitelist.map(function (e) { return exports.WhitelistCoinEntry.toJSON(e); });
        }
        if (message.min_funding_multiple !== "0") {
            obj.min_funding_multiple = message.min_funding_multiple;
        }
        return obj;
    },
    create: function (base) {
        return exports.Params.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseParams();
        message.coin_whitelist = ((_a = object.coin_whitelist) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.WhitelistCoinEntry.fromPartial(e); })) || [];
        message.min_funding_multiple = (_b = object.min_funding_multiple) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function longToString(long) {
    return long.toString();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=params.js.map