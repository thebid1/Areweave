"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeSignDoc = exports.encodeSecp256k1Signature = exports.encodeSecp256k1Pubkey = void 0;
const buffer_1 = require("buffer/");
const common_1 = require("@keplr-wallet/common");
function encodeSecp256k1Pubkey(pubkey) {
    if (pubkey.length !== 33 || (pubkey[0] !== 0x02 && pubkey[0] !== 0x03)) {
        throw new Error("Public key must be compressed secp256k1, i.e. 33 bytes starting with 0x02 or 0x03");
    }
    return {
        type: "tendermint/PubKeySecp256k1",
        value: buffer_1.Buffer.from(pubkey).toString("base64"),
    };
}
exports.encodeSecp256k1Pubkey = encodeSecp256k1Pubkey;
function encodeSecp256k1Signature(pubkey, signature) {
    if (signature.length !== 64) {
        throw new Error("Signature must be 64 bytes long. Cosmos SDK uses a 2x32 byte fixed length encoding for the secp256k1 signature integers r and s.");
    }
    return {
        pub_key: encodeSecp256k1Pubkey(pubkey),
        signature: buffer_1.Buffer.from(signature).toString("base64"),
    };
}
exports.encodeSecp256k1Signature = encodeSecp256k1Signature;
function serializeSignDoc(signDoc) {
    return buffer_1.Buffer.from((0, common_1.escapeHTML)((0, common_1.sortedJsonByKeyStringify)(signDoc)));
}
exports.serializeSignDoc = serializeSignDoc;
//# sourceMappingURL=encode.js.map