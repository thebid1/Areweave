"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryKVStore = void 0;
const base_1 = require("./base");
class MemoryKVStoreProvider {
    constructor() {
        this.store = {};
    }
    get(key) {
        return Promise.resolve({
            [key]: this.store[key],
        });
    }
    set(items) {
        // Generally, memory kv store is used for testing, and mocking.
        // However, we can store non-primitive type to memory even though local storage generally can't do that.
        // To mitigate the risk, we check the type of value to be stored if env is for testing.
        if (typeof process !== "undefined" &&
            (process.env["NODE_ENV"] === "test" ||
                process.env["NODE_ENV"] === "development")) {
            this.checkNotPrimitiveField(items);
        }
        this.store = Object.assign(Object.assign({}, this.store), items);
        return Promise.resolve();
    }
    checkNotPrimitiveField(items) {
        Object.keys(items).forEach((key) => {
            const value = items[key];
            if (value != null && typeof value === "object") {
                if (value.constructor !== Object && value.constructor !== Array) {
                    throw new Error(`${key} may not be serializable: ${value.constructor.name}`);
                }
                this.checkNotPrimitiveField(value);
            }
        });
    }
}
class MemoryKVStore extends base_1.BaseKVStore {
    constructor(prefix) {
        super(new MemoryKVStoreProvider(), prefix);
    }
}
exports.MemoryKVStore = MemoryKVStore;
//# sourceMappingURL=memory.js.map