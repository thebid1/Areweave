"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtensionKVStore = void 0;
const base_1 = require("./base");
class ExtensionKVStore extends base_1.BaseKVStore {
    constructor(prefix) {
        if (!ExtensionKVStore.KVStoreProvider) {
            if (typeof browser === "undefined") {
                console.log("You should use ExtensionKVStore on the extension environment.");
            }
            else if (!browser.storage || !browser.storage.local) {
                console.log("The 'browser' exists, but it doesn't seem to be an extension environment. This can happen in Safari browser.");
            }
            else {
                ExtensionKVStore.KVStoreProvider = {
                    get: browser.storage.local.get,
                    set: browser.storage.local.set,
                    multiGet: browser.storage.local.get,
                };
            }
        }
        if (!ExtensionKVStore.KVStoreProvider) {
            throw new Error("Can't initialize kv store for browser extension");
        }
        super(ExtensionKVStore.KVStoreProvider, prefix);
    }
    multiGet(keys) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            // Remove duplications
            keys = Array.from(new Set(keys));
            const res = (_a = (yield ExtensionKVStore.KVStoreProvider.multiGet(keys.map((k) => this.prefix() + "/" + k)))) !== null && _a !== void 0 ? _a : {};
            const prefixedKeys = Object.keys(res);
            for (const prefixedKey of prefixedKeys) {
                const key = prefixedKey.slice(this.prefix().length + 1);
                res[key] = res[prefixedKey];
                delete res[prefixedKey];
            }
            return res;
        });
    }
}
exports.ExtensionKVStore = ExtensionKVStore;
//# sourceMappingURL=extension.js.map