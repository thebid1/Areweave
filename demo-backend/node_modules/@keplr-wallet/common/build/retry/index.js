"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.retryInfinite = exports.retry = void 0;
const sleep_1 = require("../sleep");
function retry(task, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        let retries = 0;
        while (true) {
            try {
                const promise = task();
                return yield promise;
            }
            catch (e) {
                if (retries >= opts.maxRetries) {
                    throw e;
                }
                if (opts.onFailed) {
                    opts.onFailed(e);
                }
                let waitMs = opts.waitMsAfterError || 0;
                if (waitMs > 0) {
                    if (opts.maxWaitMsAfterError != null && opts.maxWaitMsAfterError > 0) {
                        waitMs = Math.pow(2, retries) * waitMs;
                        waitMs = Math.min(waitMs, opts.maxWaitMsAfterError);
                    }
                    yield (0, sleep_1.sleep)(waitMs);
                }
                retries++;
            }
        }
    });
}
exports.retry = retry;
function retryInfinite(task, opts) {
    return retry(task, Object.assign(Object.assign({}, opts), { maxRetries: Number.MAX_SAFE_INTEGER }));
}
exports.retryInfinite = retryInfinite;
//# sourceMappingURL=index.js.map