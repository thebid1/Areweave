import { OfflineAminoSigner } from "@cosmjs/amino";
import { OfflineDirectSigner } from "@cosmjs/proto-signing";
import KyveClient from "./clients/rpc-client/client";
import KyveWebClient from "./clients/rpc-client/web.client";
import { IConfig, SupportedChains } from "./constants";
/** Class representing a KyveSDK. */
export declare class KyveSDK {
    readonly config: IConfig;
    private walletSupports;
    /**
     * Create sdk instance.
     * @param chainId - The chainId of the chain the sdk should connect to [default = kyve-1]
     * @param options - The default config of the sdk can be overwritten here
     */
    constructor(chainId?: SupportedChains, options?: {
        chainName?: string;
        rpc?: string;
        rest?: string;
        coin?: string;
        coinDenom?: string;
        coinDecimals?: number;
        gasPrice?: number;
    });
    /**
     * Create a client from mnemonic
     * @param mnemonic
     * @return Promise<KyveClient>
     */
    fromMnemonic(mnemonic: string): Promise<KyveClient>;
    /**
     * create a client from private key
     * @param privateKey - hex privateKey
     * @return Promise<KyveClient>
     */
    fromPrivateKey(privateKey: string): Promise<KyveClient>;
    /**
     * create a client from offline signers
     * @param offlineSigner - offline signer
     * @param offlineAminoSigner - offline amino signer
     * @param walletName - optinal wallet name
     * @return Promise<KyveClient>
     */
    fromOfflineSigner(offlineSigner: OfflineDirectSigner | OfflineAminoSigner, offlineAminoSigner: OfflineAminoSigner, walletName?: string): Promise<KyveClient>;
    /**
     * Create a client from Keplr wallet if installed
     * @return Promise<KyveWebClient>
     */
    fromKeplr(): Promise<KyveWebClient>;
    /**
     * Create a client from Cosmostaion wallet if installed
     * @return Promise<KyveWebClient>
     */
    fromCosmostation(): Promise<KyveWebClient>;
    /**
     * Create a client from Leap wallet if installed
     * @return Promise<KyveWebClient>
     */
    fromLeap(): Promise<KyveWebClient>;
    /**
     * Listener to detect if account in wallet changed, support fromKeplr and fromCosmostation  instances
     * @param cb
     */
    onAccountChange(cb: () => void): Promise<unknown>;
    /**
     * create LCD client to get data from Rest api
     */
    createLCDClient(): import("./clients/lcd-client/client").KyveLCDClientType;
    /**
     * generate KyveClient instance without mnemonic
     */
    generate(): Promise<KyveClient>;
    static generateMnemonic(): Promise<string>;
    static getAddressFromPubKey(pubKey: string): string;
    static getAddressFromMnemonic(mnemonic: string): Promise<string>;
    static verifyString(signature: string, data: string, pubKey: string): boolean;
}
