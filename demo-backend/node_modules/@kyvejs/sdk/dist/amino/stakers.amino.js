"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStakersAminoConverters = void 0;
var math_1 = require("@cosmjs/math");
var utils_1 = require("../utils");
function protoDecimalToJson(decimal) {
    var parsed = math_1.Decimal.fromAtomics(decimal, 18);
    var _a = parsed.toString().split("."), whole = _a[0], fractional = _a[1];
    return "".concat(whole, ".").concat((fractional !== null && fractional !== void 0 ? fractional : "").padEnd(18, "0"));
}
function jsonDecimalToProto(decimal) {
    var parsed = math_1.Decimal.fromUserInput(decimal, 18);
    return parsed.atomics;
}
var createStakersAminoConverters = function () {
    return {
        "/kyve.stakers.v1beta1.MsgCreateStaker": {
            aminoType: "/kyve.stakers.v1beta1.MsgCreateStaker",
            toAmino: function (msg) { return (__assign(__assign({ creator: msg.creator }, ((0, utils_1.isNotEmpty)(msg.amount) && { amount: msg.amount })), { commission: protoDecimalToJson(msg.commission) })); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                amount: msg.amount,
                commission: jsonDecimalToProto(msg.commission),
            }); },
        },
        "/kyve.stakers.v1beta1.MsgUpdateMetadata": {
            aminoType: "/kyve.stakers.v1beta1.MsgUpdateMetadata",
            toAmino: function (msg) { return (__assign(__assign(__assign(__assign(__assign({ creator: msg.creator }, ((0, utils_1.isNotEmpty)(msg.moniker) && { moniker: msg.moniker })), ((0, utils_1.isNotEmpty)(msg.website) && { website: msg.website })), ((0, utils_1.isNotEmpty)(msg.identity) && { identity: msg.identity })), ((0, utils_1.isNotEmpty)(msg.security_contact) && {
                security_contact: msg.security_contact,
            })), ((0, utils_1.isNotEmpty)(msg.details) && { details: msg.details }))); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                moniker: msg.moniker,
                website: msg.website,
                identity: msg.identity,
                security_contact: msg.security_contact,
                details: msg.details,
            }); },
        },
        "/kyve.stakers.v1beta1.MsgUpdateCommission": {
            aminoType: "/kyve.stakers.v1beta1.MsgUpdateCommission",
            toAmino: function (msg) { return ({
                creator: msg.creator,
                commission: protoDecimalToJson(msg.commission),
            }); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                commission: jsonDecimalToProto(msg.commission),
            }); },
        },
        "/kyve.stakers.v1beta1.MsgClaimCommissionRewards": {
            aminoType: "/kyve.stakers.v1beta1.MsgClaimCommissionRewards",
            toAmino: function (msg) { return ({
                creator: msg.creator,
                amounts: __spreadArray([], msg.amounts, true),
            }); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                amounts: __spreadArray([], msg.amounts, true),
            }); },
        },
        "/kyve.stakers.v1beta1.MsgJoinPool": {
            aminoType: "/kyve.stakers.v1beta1.MsgJoinPool",
            toAmino: function (msg) { return (__assign(__assign(__assign({ creator: msg.creator }, ((0, utils_1.isNotEmpty)(msg.pool_id) && { pool_id: msg.pool_id })), { valaddress: msg.valaddress }), ((0, utils_1.isNotEmpty)(msg.amount) && { amount: msg.amount }))); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                pool_id: msg.pool_id,
                valaddress: msg.valaddress,
                amount: msg.amount,
            }); },
        },
        "/kyve.stakers.v1beta1.MsgLeavePool": {
            aminoType: "/kyve.stakers.v1beta1.MsgLeavePool",
            toAmino: function (msg) { return (__assign({ creator: msg.creator }, ((0, utils_1.isNotEmpty)(msg.pool_id) && { pool_id: msg.pool_id }))); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                pool_id: msg.pool_id,
            }); },
        },
    };
};
exports.createStakersAminoConverters = createStakersAminoConverters;
//# sourceMappingURL=stakers.amino.js.map