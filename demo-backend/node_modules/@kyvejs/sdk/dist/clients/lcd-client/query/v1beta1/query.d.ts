import paginationQuery from "@kyvejs/types/client/cosmos/base/query/v1beta1/pagination";
import kyveQueryAccount from "@kyvejs/types/client/kyve/query/v1beta1/account";
import kyveQueryBundles from "@kyvejs/types/client/kyve/query/v1beta1/bundles";
import kyveQueryDelegation from "@kyvejs/types/client/kyve/query/v1beta1/delegation";
import kyveQueryFunders from "@kyvejs/types/client/kyve/query/v1beta1/funders";
import kyveQueryParamsRes from "@kyvejs/types/client/kyve/query/v1beta1/params";
import kyveQueryPools from "@kyvejs/types/client/kyve/query/v1beta1/pools";
import kyveQueryStakers from "@kyvejs/types/client/kyve/query/v1beta1/stakers";
import kyveQueryAccountRes from "@kyvejs/types/lcd/kyve/query/v1beta1/account";
import kyveQueryBundlesRes from "@kyvejs/types/lcd/kyve/query/v1beta1/bundles";
import kyveQueryDelegationRes from "@kyvejs/types/lcd/kyve/query/v1beta1/delegation";
import kyveQueryFundersRes from "@kyvejs/types/lcd/kyve/query/v1beta1/funders";
import kyveQueryPoolsRes from "@kyvejs/types/lcd/kyve/query/v1beta1/pools";
import kyveQueryStakersRes from "@kyvejs/types/lcd/kyve/query/v1beta1/stakers";
import { AbstractKyveLCDClient } from "../../lcd-client.abstract";
type NestedPartial<T> = {
    [K in keyof T]?: T[K] extends Array<infer R> ? Array<NestedPartial<R>> : NestedPartial<T[K]>;
};
type Overwrite<T, U> = Pick<T, Exclude<keyof T, keyof U>> & U;
type PaginationRequestType = {
    offset: string;
    limit: string;
    count_total: boolean;
    reverse: boolean;
    key: string;
};
type PaginationPartialRequestUtilType<T extends {
    pagination?: paginationQuery.PageRequest;
}> = Overwrite<T, {
    pagination?: Partial<PaginationRequestType>;
}>;
type PaginationAllPartialRequestUtilType<T> = NestedPartial<Overwrite<T, {
    pagination?: {
        offset: string;
        limit: string;
        count_total: boolean;
        reverse: boolean;
        key: string;
    };
}>>;
type PaginationResponseTypeUtil<T> = Overwrite<T, {
    pagination?: {
        next_key: string;
        total: string;
    };
}>;
export declare class QueryModuleLCDClient extends AbstractKyveLCDClient {
    constructor(restEndpoint: string);
    params(): Promise<kyveQueryParamsRes.QueryParamsResponse>;
    /** Pools **/
    pool(params: kyveQueryPools.QueryPoolRequest): Promise<kyveQueryPoolsRes.QueryPoolResponse>;
    pools(params?: PaginationAllPartialRequestUtilType<kyveQueryPools.QueryPoolsRequest>): Promise<PaginationResponseTypeUtil<kyveQueryPoolsRes.QueryPoolsResponse>>;
    /** end Pools **/
    /** Stakers **/
    stakers(params: PaginationPartialRequestUtilType<kyveQueryStakers.QueryStakersRequest>): Promise<PaginationResponseTypeUtil<kyveQueryStakersRes.QueryStakersResponse>>;
    staker(params: kyveQueryStakers.QueryStakerRequest): Promise<kyveQueryStakersRes.QueryStakerResponse>;
    stakersByPool(params: kyveQueryStakers.QueryStakersByPoolRequest): Promise<kyveQueryStakersRes.QueryStakersByPoolResponse>;
    /** end stakers **/
    /** Bundles **/
    currentVoteStatus(params: kyveQueryBundles.QueryCurrentVoteStatusRequest): Promise<kyveQueryBundlesRes.QueryCurrentVoteStatusResponse>;
    canValidate(params: kyveQueryBundles.QueryCanValidateRequest): Promise<kyveQueryBundles.QueryCanValidateResponse>;
    canPropose(params: kyveQueryBundles.QueryCanProposeRequest): Promise<kyveQueryBundles.QueryCanProposeResponse>;
    canVote(params: kyveQueryBundles.QueryCanVoteRequest): Promise<kyveQueryBundles.QueryCanVoteResponse>;
    /** end Bundles **/
    /** Delegations **/
    delegator(params: kyveQueryDelegation.QueryDelegatorRequest): Promise<kyveQueryDelegationRes.QueryDelegatorResponse>;
    delegatorsByStaker(params: PaginationPartialRequestUtilType<kyveQueryDelegation.QueryDelegatorsByStakerRequest>): Promise<PaginationResponseTypeUtil<kyveQueryDelegationRes.QueryDelegatorsByStakerResponse>>;
    stakersByDelegator(params: PaginationPartialRequestUtilType<kyveQueryDelegation.QueryStakersByDelegatorRequest>): Promise<PaginationResponseTypeUtil<kyveQueryDelegationRes.QueryStakersByDelegatorResponse>>;
    /** end Delegations **/
    /*** Account **/
    accountAssets(params: kyveQueryAccount.QueryAccountAssetsRequest): Promise<kyveQueryAccountRes.QueryAccountAssetsResponse>;
    accountDelegationUnbondings(params: PaginationPartialRequestUtilType<kyveQueryAccount.QueryAccountDelegationUnbondingsRequest>): Promise<PaginationResponseTypeUtil<kyveQueryAccountRes.QueryAccountDelegationUnbondingsResponse>>;
    accountFundedList(params: kyveQueryAccount.QueryAccountFundedListRequest): Promise<kyveQueryAccountRes.QueryAccountFundedListResponse>;
    accountRedelegation(params: kyveQueryAccount.QueryAccountRedelegationRequest): Promise<kyveQueryAccountRes.QueryAccountRedelegationResponse>;
    /** End Account **/
    /** Funders **/
    funder(params: kyveQueryFunders.QueryFunderRequest): Promise<kyveQueryFundersRes.QueryFunderResponse>;
    funders(params?: PaginationAllPartialRequestUtilType<kyveQueryFunders.QueryFundersRequest>): Promise<PaginationResponseTypeUtil<kyveQueryFundersRes.QueryFundersResponse>>;
    fundings_by_funder(params: PaginationPartialRequestUtilType<kyveQueryFunders.QueryFundingsByFunderRequest>): Promise<PaginationResponseTypeUtil<kyveQueryFundersRes.QueryFundingsByFunderResponse>>;
    fundings_by_pool(params: PaginationPartialRequestUtilType<kyveQueryFunders.QueryFundingsByPoolRequest>): Promise<PaginationResponseTypeUtil<kyveQueryFundersRes.QueryFundingsByPoolResponse>>;
}
export {};
