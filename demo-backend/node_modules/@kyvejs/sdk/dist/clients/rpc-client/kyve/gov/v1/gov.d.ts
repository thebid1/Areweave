import { StdFee } from "@cosmjs/amino/build/signdoc";
import { MsgUpdateParams as MsgUpdateParamsBundles } from "@kyvejs/types/client/kyve/bundles/v1beta1/tx";
import { MsgUpdateParams as MsgUpdateParamsDelegation } from "@kyvejs/types/client/kyve/delegation/v1beta1/tx";
import { MsgUpdateParams as MsgUpdateParamsGlobal } from "@kyvejs/types/client/kyve/global/v1beta1/tx";
import { MsgCancelRuntimeUpgrade, MsgCreatePool, MsgDisablePool, MsgEnablePool, MsgScheduleRuntimeUpgrade, MsgUpdatePool } from "@kyvejs/types/client/kyve/pool/v1beta1/tx";
import { MsgUpdateParams as MsgUpdateParamsStakers } from "@kyvejs/types/client/kyve/stakers/v1beta1/tx";
import { KyveSigning, PendingTx } from "../../../signing";
export default class KyveGovMsg extends KyveSigning {
    private createGovTx;
    createPool(value: Omit<MsgCreatePool, "authority">, deposit: string, title: string, summary: string, metadata?: string, options?: {
        fee?: StdFee | "auto" | number;
        memo?: string;
    }): PendingTx<import("../../../signing").PendingSignedTx>;
    updatePool(value: Omit<MsgUpdatePool, "authority">, deposit: string, title: string, summary: string, metadata?: string, options?: {
        fee?: StdFee | "auto" | number;
        memo?: string;
    }): PendingTx<import("../../../signing").PendingSignedTx>;
    disablePool(value: Omit<MsgDisablePool, "authority">, deposit: string, title: string, summary: string, metadata?: string, options?: {
        fee?: StdFee | "auto" | number;
        memo?: string;
    }): PendingTx<import("../../../signing").PendingSignedTx>;
    enablePool(value: Omit<MsgEnablePool, "authority">, deposit: string, title: string, summary: string, metadata?: string, options?: {
        fee?: StdFee | "auto" | number;
        memo?: string;
    }): PendingTx<import("../../../signing").PendingSignedTx>;
    scheduleRuntimeUpgrade(value: Omit<MsgScheduleRuntimeUpgrade, "authority">, deposit: string, title: string, summary: string, metadata?: string, options?: {
        fee?: StdFee | "auto" | number;
        memo?: string;
    }): PendingTx<import("../../../signing").PendingSignedTx>;
    cancelRuntimeUpgrade(value: Omit<MsgCancelRuntimeUpgrade, "authority">, deposit: string, title: string, summary: string, metadata?: string, options?: {
        fee?: StdFee | "auto" | number;
        memo?: string;
    }): PendingTx<import("../../../signing").PendingSignedTx>;
    updateParamsStakers(value: Omit<MsgUpdateParamsStakers, "authority">, deposit: string, title: string, summary: string, metadata?: string, options?: {
        fee?: StdFee | "auto" | number;
        memo?: string;
    }): PendingTx<import("../../../signing").PendingSignedTx>;
    updateParamsDelegation(value: Omit<MsgUpdateParamsDelegation, "authority">, deposit: string, title: string, summary: string, metadata?: string, options?: {
        fee?: StdFee | "auto" | number;
        memo?: string;
    }): PendingTx<import("../../../signing").PendingSignedTx>;
    updateParamsBundles(value: Omit<MsgUpdateParamsBundles, "authority">, deposit: string, title: string, summary: string, metadata?: string, options?: {
        fee?: StdFee | "auto" | number;
        memo?: string;
    }): PendingTx<import("../../../signing").PendingSignedTx>;
    updateParamsGlobal(value: Omit<MsgUpdateParamsGlobal, "authority">, deposit: string, title: string, summary: string, metadata?: string, options?: {
        fee?: StdFee | "auto" | number;
        memo?: string;
    }): PendingTx<import("../../../signing").PendingSignedTx>;
    vote(id: string, voteOption: "Yes" | "Abstain" | "No" | "NoWithVeto", options?: {
        fee?: StdFee | "auto" | number;
        memo?: string;
    }): PendingTx<import("../../../signing").PendingSignedTx>;
}
