/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import axios, { CanceledError } from 'axios';
import axiosRetry from 'axios-retry';
import { TurboWinstonLogger } from '../common/logger.js';
import { version } from '../version.js';
export const defaultRequestHeaders = {
    'x-turbo-source-version': version,
    'x-turbo-source-identifier': 'turbo-sdk',
};
export const createAxiosInstance = ({ logger = TurboWinstonLogger.default, axiosConfig = {}, retryConfig = {
    retryDelay: axiosRetry.exponentialDelay,
    retries: 3,
    retryCondition: (error) => {
        return (!(error instanceof CanceledError) &&
            axiosRetry.isNetworkOrIdempotentRequestError(error));
    },
    onRetry: (retryCount, error) => {
        logger.debug(`Request failed, ${error}. Retry attempt #${retryCount}...`);
    },
}, } = {}) => {
    const axiosInstance = axios.create({
        ...axiosConfig,
        headers: {
            ...axiosConfig.headers,
            ...defaultRequestHeaders,
        },
        validateStatus: () => true, // don't throw on non-200 status codes
    });
    // eslint-disable-next-line
    if (retryConfig.retries && retryConfig.retries > 0) {
        axiosRetry(axiosInstance, retryConfig);
    }
    return axiosInstance;
};
