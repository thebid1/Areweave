import { GetTurboSignerParams, TurboAuthenticatedConfiguration, TurboAuthenticatedUploadServiceConfiguration, TurboAuthenticatedUploadServiceInterface, TurboUnauthenticatedConfiguration } from '../types.js';
import { TurboWinstonLogger } from './logger.js';
import { TurboDataItemAbstractSigner } from './signer.js';
import { TurboAuthenticatedClient, TurboUnauthenticatedClient } from './turbo.js';
export declare abstract class TurboBaseFactory {
    protected static logger: TurboWinstonLogger;
    static setLogLevel(level: string): void;
    static setLogFormat(format: string): void;
    static unauthenticated({ paymentServiceConfig, uploadServiceConfig, token, }?: TurboUnauthenticatedConfiguration): TurboUnauthenticatedClient;
    protected abstract getSigner({ providedPrivateKey, providedSigner, providedWalletAdapter, logger, token, }: GetTurboSignerParams): TurboDataItemAbstractSigner;
    protected abstract getAuthenticatedUploadService(config: TurboAuthenticatedUploadServiceConfiguration): TurboAuthenticatedUploadServiceInterface;
    protected getAuthenticatedTurbo({ privateKey, signer: providedSigner, paymentServiceConfig, uploadServiceConfig, token, gatewayUrl, tokenMap, tokenTools, logger, walletAdapter, }: TurboAuthenticatedConfiguration & {
        logger: TurboWinstonLogger;
    }): TurboAuthenticatedClient;
    private signerFromAdapter;
}
//# sourceMappingURL=factory.d.ts.map