"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sleep = sleep;
exports.isWeb = isWeb;
exports.createTurboSigner = createTurboSigner;
exports.signerFromKyvePrivateKey = signerFromKyvePrivateKey;
exports.signerFromKyveMnemonic = signerFromKyveMnemonic;
/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const amino_1 = require("@cosmjs/amino");
const crypto_1 = require("@cosmjs/crypto");
const encoding_1 = require("@cosmjs/encoding");
const arbundles_1 = require("@dha-team/arbundles");
const types_js_1 = require("../types.js");
function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
function isWeb() {
    return typeof window !== 'undefined';
}
function createTurboSigner({ signer: clientProvidedSigner, privateKey: clientProvidedPrivateKey, token = 'arweave', }) {
    if (clientProvidedSigner !== undefined) {
        return clientProvidedSigner;
    }
    if (clientProvidedPrivateKey === undefined) {
        throw new Error('A privateKey or signer must be provided.');
    }
    switch (token) {
        case 'solana':
            return new arbundles_1.HexSolanaSigner(clientProvidedPrivateKey);
        case 'ethereum':
        case 'pol':
        case 'matic':
            if (!(0, types_js_1.isEthPrivateKey)(clientProvidedPrivateKey)) {
                throw new Error('A valid Ethereum private key must be provided for EthereumSigner.');
            }
            return new arbundles_1.EthereumSigner(clientProvidedPrivateKey);
        case 'kyve':
            if (!(0, types_js_1.isKyvePrivateKey)(clientProvidedPrivateKey)) {
                throw new Error('A valid Kyve private key must be provided for KyveSigner.');
            }
            return signerFromKyvePrivateKey(clientProvidedPrivateKey);
        default:
            if (!(0, types_js_1.isJWK)(clientProvidedPrivateKey)) {
                throw new Error('A JWK must be provided for ArweaveSigner.');
            }
            return new arbundles_1.ArweaveSigner(clientProvidedPrivateKey);
    }
}
function signerFromKyvePrivateKey(privateKey) {
    // TODO: Use KyveSigner when implemented for on chain native address support
    return new arbundles_1.EthereumSigner(privateKey);
}
async function signerFromKyveMnemonic(mnemonic) {
    const kyveWallet = await amino_1.Secp256k1HdWallet.fromMnemonic(mnemonic, {
        prefix: 'kyve',
    });
    const privateKey = (0, encoding_1.toHex)(crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, kyveWallet['seed'], (0, amino_1.makeCosmoshubPath)(0)).privkey);
    return signerFromKyvePrivateKey(privateKey);
}
