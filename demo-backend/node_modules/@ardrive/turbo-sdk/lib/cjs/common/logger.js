"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurboWinstonLogger = void 0;
/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const winston_1 = require("winston");
const version_js_1 = require("../version.js");
class TurboWinstonLogger {
    constructor({ level = 'info', logFormat = 'simple', } = {}) {
        this.silent = false;
        if (level === 'none') {
            this.silent = true;
        }
        if (typeof window !== 'undefined') {
            this.logger = console;
        }
        else {
            this.logger = (0, winston_1.createLogger)({
                level,
                silent: this.silent,
                defaultMeta: {
                    name: 'turbo-sdk',
                    version: version_js_1.version,
                },
                format: winston_1.format.combine(winston_1.format.timestamp(), winston_1.format.json()),
                transports: [
                    new winston_1.transports.Console({
                        format: getLogFormat(logFormat),
                    }),
                ],
            });
        }
    }
    info(message, ...args) {
        if (this.silent)
            return;
        this.logger.info(message, ...args);
    }
    warn(message, ...args) {
        if (this.silent)
            return;
        this.logger.warn(message, ...args);
    }
    error(message, ...args) {
        if (this.silent)
            return;
        this.logger.error(message, ...args);
    }
    debug(message, ...args) {
        if (this.silent)
            return;
        this.logger.debug(message, ...args);
    }
    setLogLevel(level) {
        this.silent = level === 'none';
        if ('silent' in this.logger) {
            this.logger.silent = level === 'none';
        }
        if ('level' in this.logger) {
            this.logger.level = level;
        }
    }
    setLogFormat(logFormat) {
        if ('format' in this.logger) {
            this.logger.format = getLogFormat(logFormat);
        }
    }
}
exports.TurboWinstonLogger = TurboWinstonLogger;
TurboWinstonLogger.default = new TurboWinstonLogger();
function getLogFormat(logFormat) {
    return winston_1.format.combine((0, winston_1.format)((info) => {
        if (info.stack && info.level !== 'error') {
            delete info.stack;
        }
        return info;
    })(), winston_1.format.errors({ stack: true }), // Ensure errors show a stack trace
    winston_1.format.timestamp(), logFormat === 'json' ? winston_1.format.json() : winston_1.format.simple());
}
