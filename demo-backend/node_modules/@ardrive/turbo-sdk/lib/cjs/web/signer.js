"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurboWebArweaveSigner = exports.HexSolanaSigner = exports.EthereumSigner = exports.ArweaveSigner = exports.ArconnectSigner = void 0;
/**
 * Copyright (C) 2022-2024 Permanent Data Solutions, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const arbundles_1 = require("@dha-team/arbundles");
Object.defineProperty(exports, "ArconnectSigner", { enumerable: true, get: function () { return arbundles_1.ArconnectSigner; } });
Object.defineProperty(exports, "ArweaveSigner", { enumerable: true, get: function () { return arbundles_1.ArweaveSigner; } });
Object.defineProperty(exports, "EthereumSigner", { enumerable: true, get: function () { return arbundles_1.EthereumSigner; } });
Object.defineProperty(exports, "HexSolanaSigner", { enumerable: true, get: function () { return arbundles_1.HexSolanaSigner; } });
const node_buffer_1 = require("node:buffer");
const signer_js_1 = require("../common/signer.js");
const readableStream_js_1 = require("../utils/readableStream.js");
/**
 * Web implementation of TurboDataItemSigner.
 */
class TurboWebArweaveSigner extends signer_js_1.TurboDataItemAbstractSigner {
    constructor(p) {
        super(p);
    }
    async setPublicKey() {
        // for arconnect, we need to make sure we have the public key before create data
        if (this.signer.publicKey === undefined &&
            (this.signer instanceof arbundles_1.ArconnectSigner ||
                this.signer instanceof arbundles_1.InjectedEthereumSigner)) {
            await this.signer.setPublicKey();
        }
    }
    async getPublicKey() {
        await this.setPublicKey();
        return super.getPublicKey();
    }
    async signDataItem({ fileStreamFactory, fileSizeFactory, dataItemOpts, }) {
        await this.setPublicKey();
        const fileStream = fileStreamFactory();
        // TODO: converts the readable stream to a buffer bc incrementally signing ReadableStreams is not trivial
        const buffer = fileStream instanceof node_buffer_1.Buffer
            ? fileStream
            : await (0, readableStream_js_1.readableStreamToBuffer)({
                stream: fileStream,
                size: fileSizeFactory(),
            });
        this.logger.debug('Signing data item...');
        const signedDataItem = (0, arbundles_1.createData)(buffer, this.signer, dataItemOpts);
        await signedDataItem.sign(this.signer);
        this.logger.debug('Successfully signed data item...');
        return {
            // while this returns a Buffer - it needs to match our return type for uploading
            dataItemStreamFactory: () => signedDataItem.getRaw(),
            dataItemSizeFactory: () => signedDataItem.getRaw().length,
        };
    }
    async generateSignedRequestHeaders() {
        await this.setPublicKey();
        return super.generateSignedRequestHeaders();
    }
    async signData(dataToSign) {
        await this.setPublicKey();
        return super.signData(dataToSign);
    }
}
exports.TurboWebArweaveSigner = TurboWebArweaveSigner;
