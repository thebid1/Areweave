import type { ActivatedChainNamesResponse, AddChainParams, CW20Token, GetAutoSignResponse, getCW20TokenInfoResponse, RequestAccountResponse, SendTransactionMode, SendTransactionResponse, SignAminoDoc, SignAminoResponse, SignDirectDoc, SignDirectResponse, SignMessageResponse, SignOptions, SupportedChainNamesResponse } from './types/message';
export declare function getSupportedChains(): Promise<SupportedChainNamesResponse>;
export declare function getActivatedChains(): Promise<ActivatedChainNamesResponse>;
export declare function getSupportedChainIds(): Promise<SupportedChainNamesResponse>;
export declare function getActivatedChainIds(): Promise<ActivatedChainNamesResponse>;
export declare function getAccount(chainName: string): Promise<RequestAccountResponse>;
export declare function requestAccount(chainName: string): Promise<RequestAccountResponse>;
export declare function addChain(chain: AddChainParams): Promise<boolean>;
export declare function signAmino(chainName: string, doc: SignAminoDoc, options?: SignOptions): Promise<SignAminoResponse>;
export declare function signDirect(chainName: string, doc: SignDirectDoc, options?: SignOptions): Promise<SignDirectResponse>;
export declare function signMessage(chainName: string, signer: string, message: string): Promise<SignMessageResponse>;
export declare function verifyMessage(chainName: string, signer: string, message: string, signMessageResponse: SignMessageResponse): Promise<boolean>;
export declare function sendTransaction(chainName: string, txBytes: Uint8Array | string, mode: SendTransactionMode): Promise<SendTransactionResponse>;
export declare const autoSign: {
    set: (chainName: string, duration: number) => Promise<null>;
    get: (chainName: string) => Promise<GetAutoSignResponse>;
    delete: (chainName: string) => Promise<null>;
};
export declare function addCW20Tokens(chainName: string, tokens: CW20Token[]): Promise<null>;
export declare function getCW20TokenBalance(chainName: string, contractAddress: string, address: string): Promise<string>;
export declare function getCW20TokenInfo(chainName: string, contractAddress: string): Promise<getCW20TokenInfoResponse>;
export declare function on(eventName: 'accountChanged', handler: () => void): unknown;
export declare function off(event: unknown): void;
export declare function onAccountChanged(handler: () => void): unknown;
export declare function offAccountChanged(event: unknown): void;
export declare function disconnect(): Promise<null>;
export declare const SEND_TRANSACTION_MODE: {
    readonly UNSPECIFIED: 0;
    readonly BLOCK: 1;
    readonly SYNC: 2;
    readonly ASYNC: 3;
};
export declare const COSMOS_TYPE: {
    readonly BASIC: "";
    readonly ETHERMINT: "ETHERMINT";
};
