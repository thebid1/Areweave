import type { COSMOS_TYPE, SEND_TRANSACTION_MODE } from '../cosmos';
export declare type SendTransactionMode = typeof SEND_TRANSACTION_MODE[keyof typeof SEND_TRANSACTION_MODE];
export declare type CosmosType = typeof COSMOS_TYPE[keyof typeof COSMOS_TYPE];
export declare type SupportedChainNamesResponse = {
    official: string[];
    unofficial: string[];
};
export declare type SupportedChainIdsResponse = SupportedChainNamesResponse;
export declare type ActivatedChainNamesResponse = string[];
export declare type ActivatedChainIdsResponse = ActivatedChainNamesResponse;
export declare type SignMessageResponse = {
    signature: string;
    pub_key: {
        type: string;
        value: string;
    };
};
export declare type VerifyMessageResponse = boolean;
export declare type RequestAccountResponse = {
    address: string;
    publicKey: Uint8Array;
    name: string;
    isLedger: boolean;
};
export declare type AccountResponse = RequestAccountResponse;
export declare type GasRate = {
    tiny: string;
    low: string;
    average: string;
};
export declare type AddChainParams = {
    chainId: string;
    chainName: string;
    restURL: string;
    imageURL?: string;
    baseDenom: string;
    displayDenom: string;
    decimals?: number;
    coinType?: string;
    addressPrefix: string;
    coinGeckoId?: string;
    gasRate?: GasRate;
    sendGas?: string;
    type?: CosmosType;
};
export declare type Amount = {
    denom: string;
    amount: string;
};
export declare type Msg<T = unknown> = {
    type: string;
    value: T;
};
export declare type Fee = {
    amount: Amount[];
    gas: string;
};
export declare type SignAminoDoc = {
    chain_id: string;
    sequence: string;
    account_number: string;
    fee: Fee;
    memo: string;
    msgs: Msg[];
};
export declare type SignAminoResponse = {
    signature: string;
    pub_key: {
        type: string;
        value: string;
    };
    signed_doc: SignAminoDoc;
};
export declare type SignDirectDoc = {
    chain_id: string;
    body_bytes: Uint8Array;
    auth_info_bytes: Uint8Array;
    account_number: string;
};
export declare type SignDirectResponse = {
    signature: string;
    pub_key: {
        type: string;
        value: string;
    };
    signed_doc: SignDirectDoc;
};
export declare type SignOptions = {
    memo?: boolean;
    fee?: boolean;
    gasRate?: {
        tiny: string;
        low: string;
        average: string;
    };
};
export declare type SendTransaction = {
    code: number;
    txhash: string;
    raw_log?: unknown;
    codespace?: unknown;
    tx?: unknown;
    log?: unknown;
    info?: unknown;
    height?: unknown;
    gas_wanted?: unknown;
    gas_used?: unknown;
    events?: unknown;
    data?: unknown;
    timestamp?: unknown;
};
export declare type SendTransactionResponse = {
    tx_response: SendTransaction;
};
export declare type DisconnectResponse = null;
export declare type SetAutoSignResponse = null;
export declare type GetAutoSignResponse = number | null;
export declare type DeleteAutoSignResponse = null;
export declare type CW20Token = {
    contractAddress: string;
    imageURL?: string;
    coinGeckoId?: string;
};
export declare type AddCW20TokenResponse = null;
export declare type getCW20TokenBalanceResponse = string;
export declare type getCW20TokenInfoResponse = {
    decimals: number;
    name: string;
    symbol: string;
    total_supply: string;
};
export declare type AptosIsConnectedResponse = boolean;
export declare type AptosConnectResponse = {
    address: string;
    publicKey: string;
};
export declare type AptosAccountResponse = AptosConnectResponse;
export declare type AptosDisconnectResponse = null;
export declare type AptosNetworkResponse = string;
export declare type AptosSignPayload<T = unknown> = {
    function: string;
    type: string;
    type_arguments: string[];
    arguments: T[];
};
export declare type AptosSignTransactionResponse = string;
export declare type AptosPendingTransaction = {
    hash: string;
    sender: string;
    sequence_number: string;
    max_gas_amount: string;
    gas_unit_price: string;
    expiration_timestamp_secs: string;
    payload: AptosSignPayload;
    signature?: {
        type: string;
        public_key: string;
        signature: string;
    };
};
export declare type AptosSignAndSubmitTransactionResponse = AptosPendingTransaction;
export declare type AptosSignMessageParams = {
    address?: boolean;
    application?: boolean;
    chainId?: boolean;
    message: string;
    nonce: number;
};
export declare type AptosSignMessageResponse = {
    address: string;
    application: string;
    chainId: number;
    message: string;
    nonce: number;
    fullMessage: string;
    prefix: string;
    signature: string;
};
